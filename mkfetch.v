//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Jul 13 15:27:32 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_flush                      O     1 const
// RDY_stall_fetch                O     1 const
// request_to_imem_get            O    84
// RDY_request_to_imem_get        O     1
// RDY_instruction_response_from_imem  O     1 reg
// RDY_prediction_response_put    O     1
// send_prediction_request_get    O    42
// RDY_send_prediction_request_get  O     1 const
// tx_out_enq_ena                 O     1
// tx_out_enq_data                O   185
// RDY_push_ras                   O     1 const
// RDY_update_eEpoch              O     1 const
// RDY_update_wEpoch              O     1 const
// reset_vector                   I    39 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// flush_new_pc                   I    39
// flush_fl                       I     2
// stall_fetch_stall              I     1
// instruction_response_from_imem_x  I   187
// prediction_response_put        I    83
// tx_out_notFull_b               I     1
// tx_out_enq_rdy_b               I     1
// push_ras_addr                  I    40
// EN_flush                       I     1
// EN_stall_fetch                 I     1
// EN_instruction_response_from_imem  I     1
// EN_prediction_response_put     I     1
// EN_push_ras                    I     1
// EN_update_eEpoch               I     1
// EN_update_wEpoch               I     1
// EN_request_to_imem_get         I     1
// EN_send_prediction_request_get  I     1 unused
//
// Combinational paths from inputs to outputs:
//   (flush_new_pc,
//    stall_fetch_stall,
//    instruction_response_from_imem_x,
//    prediction_response_put,
//    tx_out_notFull_b,
//    tx_out_enq_rdy_b,
//    EN_flush,
//    EN_stall_fetch,
//    EN_instruction_response_from_imem,
//    EN_prediction_response_put,
//    EN_request_to_imem_get) -> send_prediction_request_get
//   (stall_fetch_stall,
//    tx_out_notFull_b,
//    EN_stall_fetch) -> RDY_request_to_imem_get
//   (stall_fetch_stall,
//    tx_out_notFull_b,
//    EN_stall_fetch,
//    EN_request_to_imem_get) -> RDY_prediction_response_put
//   (instruction_response_from_imem_x,
//    tx_out_enq_rdy_b,
//    EN_instruction_response_from_imem) -> tx_out_enq_ena
//   (instruction_response_from_imem_x,
//    tx_out_enq_rdy_b,
//    EN_instruction_response_from_imem) -> tx_out_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfetch(reset_vector,
	       CLK,
	       RST_N,

	       flush_new_pc,
	       flush_fl,
	       EN_flush,
	       RDY_flush,

	       stall_fetch_stall,
	       EN_stall_fetch,
	       RDY_stall_fetch,

	       EN_request_to_imem_get,
	       request_to_imem_get,
	       RDY_request_to_imem_get,

	       instruction_response_from_imem_x,
	       EN_instruction_response_from_imem,
	       RDY_instruction_response_from_imem,

	       prediction_response_put,
	       EN_prediction_response_put,
	       RDY_prediction_response_put,

	       EN_send_prediction_request_get,
	       send_prediction_request_get,
	       RDY_send_prediction_request_get,

	       tx_out_notFull_b,

	       tx_out_enq_rdy_b,

	       tx_out_enq_ena,

	       tx_out_enq_data,

	       push_ras_addr,
	       EN_push_ras,
	       RDY_push_ras,

	       EN_update_eEpoch,
	       RDY_update_eEpoch,

	       EN_update_wEpoch,
	       RDY_update_wEpoch);
  input  [38 : 0] reset_vector;
  input  CLK;
  input  RST_N;

  // action method flush
  input  [38 : 0] flush_new_pc;
  input  [1 : 0] flush_fl;
  input  EN_flush;
  output RDY_flush;

  // action method stall_fetch
  input  stall_fetch_stall;
  input  EN_stall_fetch;
  output RDY_stall_fetch;

  // actionvalue method request_to_imem_get
  input  EN_request_to_imem_get;
  output [83 : 0] request_to_imem_get;
  output RDY_request_to_imem_get;

  // action method instruction_response_from_imem
  input  [186 : 0] instruction_response_from_imem_x;
  input  EN_instruction_response_from_imem;
  output RDY_instruction_response_from_imem;

  // action method prediction_response_put
  input  [82 : 0] prediction_response_put;
  input  EN_prediction_response_put;
  output RDY_prediction_response_put;

  // actionvalue method send_prediction_request_get
  input  EN_send_prediction_request_get;
  output [41 : 0] send_prediction_request_get;
  output RDY_send_prediction_request_get;

  // action method tx_out_notFull
  input  tx_out_notFull_b;

  // action method tx_out_enq_rdy
  input  tx_out_enq_rdy_b;

  // value method tx_out_enq_ena
  output tx_out_enq_ena;

  // value method tx_out_enq_data
  output [184 : 0] tx_out_enq_data;

  // action method push_ras
  input  [39 : 0] push_ras_addr;
  input  EN_push_ras;
  output RDY_push_ras;

  // action method update_eEpoch
  input  EN_update_eEpoch;
  output RDY_update_eEpoch;

  // action method update_wEpoch
  input  EN_update_wEpoch;
  output RDY_update_wEpoch;

  // signals for module outputs
  wire [184 : 0] tx_out_enq_data;
  wire [83 : 0] request_to_imem_get;
  wire [41 : 0] send_prediction_request_get;
  wire RDY_flush,
       RDY_instruction_response_from_imem,
       RDY_prediction_response_put,
       RDY_push_ras,
       RDY_request_to_imem_get,
       RDY_send_prediction_request_get,
       RDY_stall_fetch,
       RDY_update_eEpoch,
       RDY_update_wEpoch,
       tx_out_enq_ena;

  // inlined wires
  wire [185 : 0] ff_response_to_cpu_enqw$wget;
  wire [184 : 0] tx_w_data$wget;
  wire [39 : 0] wr_flush_prediction$wget;
  wire [38 : 0] rg_programcounter$port1__read;
  wire [2 : 0] ras_top_index$port0__write_1,
	       ras_top_index$port1__write_1,
	       ras_top_index$port2__read;
  wire ff_response_to_cpu_dequeueing$whas,
       ff_response_to_cpu_enqw$whas,
       iEpoch$EN_port0__write,
       ras_top_index$EN_port0__write,
       ras_top_index$EN_port1__write,
       rg_fence$EN_port1__write,
       rg_fence$port1__read,
       rg_fence$port2__read,
       tx_w_ena$whas,
       wr_flush_prediction$whas;

  // register eEpoch
  reg eEpoch;
  wire eEpoch$D_IN, eEpoch$EN;

  // register iEpoch
  reg iEpoch;
  wire iEpoch$D_IN, iEpoch$EN;

  // register ras_top_index
  reg [2 : 0] ras_top_index;
  wire [2 : 0] ras_top_index$D_IN;
  wire ras_top_index$EN;

  // register rg_fence
  reg rg_fence;
  wire rg_fence$D_IN, rg_fence$EN;

  // register rg_programcounter
  reg [38 : 0] rg_programcounter;
  wire [38 : 0] rg_programcounter$D_IN;
  wire rg_programcounter$EN;

  // register wEpoch
  reg wEpoch;
  wire wEpoch$D_IN, wEpoch$EN;

  // ports of submodule ff_response_to_cpu_ff
  wire [185 : 0] ff_response_to_cpu_ff$D_IN, ff_response_to_cpu_ff$D_OUT;
  wire ff_response_to_cpu_ff$CLR,
       ff_response_to_cpu_ff$DEQ,
       ff_response_to_cpu_ff$EMPTY_N,
       ff_response_to_cpu_ff$ENQ,
       ff_response_to_cpu_ff$FULL_N;

  // ports of submodule ff_response_to_cpu_firstValid
  wire ff_response_to_cpu_firstValid$D_IN,
       ff_response_to_cpu_firstValid$EN,
       ff_response_to_cpu_firstValid$Q_OUT;

  // ports of submodule generate_pc
  wire [79 : 0] generate_pc$D_IN, generate_pc$D_OUT;
  wire generate_pc$CLR,
       generate_pc$DEQ,
       generate_pc$EMPTY_N,
       generate_pc$ENQ,
       generate_pc$FULL_N;

  // ports of submodule ras_array_reg
  wire [38 : 0] ras_array_reg$D_IN, ras_array_reg$D_OUT_1;
  wire [2 : 0] ras_array_reg$ADDR_1,
	       ras_array_reg$ADDR_2,
	       ras_array_reg$ADDR_3,
	       ras_array_reg$ADDR_4,
	       ras_array_reg$ADDR_5,
	       ras_array_reg$ADDR_IN;
  wire ras_array_reg$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_enque_new_pc,
       CAN_FIRE_RL_ff_response_to_cpu_dequeue,
       CAN_FIRE_RL_ff_response_to_cpu_enqueue,
       CAN_FIRE_RL_get_instruction_from_cache,
       CAN_FIRE_flush,
       CAN_FIRE_instruction_response_from_imem,
       CAN_FIRE_prediction_response_put,
       CAN_FIRE_push_ras,
       CAN_FIRE_request_to_imem_get,
       CAN_FIRE_send_prediction_request_get,
       CAN_FIRE_stall_fetch,
       CAN_FIRE_tx_out_enq_rdy,
       CAN_FIRE_tx_out_notFull,
       CAN_FIRE_update_eEpoch,
       CAN_FIRE_update_wEpoch,
       WILL_FIRE_RL_enque_new_pc,
       WILL_FIRE_RL_ff_response_to_cpu_dequeue,
       WILL_FIRE_RL_ff_response_to_cpu_enqueue,
       WILL_FIRE_RL_get_instruction_from_cache,
       WILL_FIRE_flush,
       WILL_FIRE_instruction_response_from_imem,
       WILL_FIRE_prediction_response_put,
       WILL_FIRE_push_ras,
       WILL_FIRE_request_to_imem_get,
       WILL_FIRE_send_prediction_request_get,
       WILL_FIRE_stall_fetch,
       WILL_FIRE_tx_out_enq_rdy,
       WILL_FIRE_tx_out_notFull,
       WILL_FIRE_update_eEpoch,
       WILL_FIRE_update_wEpoch;

  // inputs to muxes for submodule ports
  wire [79 : 0] MUX_generate_pc$enq_1__VAL_1, MUX_generate_pc$enq_1__VAL_2;
  wire MUX_generate_pc$enq_1__SEL_2;

  // remaining internal signals
  reg [6 : 0] CASE_ab172_BITS_73_TO_72_0_0_CONCAT_CASE_IF_ff_ETC__q10,
	      CASE_instruction_response_from_imem_x_BITS_73__ETC__q3;
  reg [4 : 0] CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13,
	      CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8,
	      CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6,
	      CASE_instruction_response_from_imem_x_BITS_71__ETC__q1;
  reg [3 : 0] CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9,
	      CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7,
	      CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11,
	      CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4,
	      CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5,
	      CASE_instruction_response_from_imem_x_BITS_70__ETC__q2,
	      CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12,
	      IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101,
	      IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47,
	      IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529;
  wire [185 : 0] ab__h1172;
  wire [73 : 0] IF_ff_response_to_cpu_enqw_wget_BITS_73_TO_72__ETC___d129;
  wire [63 : 0] perfmonitors__h2373;
  wire [38 : 0] IF_IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_ETC___d193,
		_theResult____h5056,
		b__h5196,
		npc___1__h5136,
		npc__h2367,
		pc__h2363,
		x__h4028,
		x__h4118,
		x__h5220,
		y_avValue_snd__h3141,
		y_avValue_snd__h3368;
  wire [31 : 0] IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150;
  wire [6 : 0] IF_IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_ETC___d311,
	       IF_tx_w_data_whas__36_AND_tx_w_data_wget__37_B_ETC___d553,
	       IF_tx_w_data_whas__36_AND_tx_w_data_wget__37_B_ETC___d554;
  wire [3 : 0] IF_ff_response_to_cpu_ff_i_notEmpty_THEN_IF_ff_ETC___d286;
  wire [2 : 0] epoch__h2374, x__h5179, x_port1__read__h5787, y__h2431;
  wire [1 : 0] prediction__h2365,
	       v__h3156,
	       v__h3216,
	       x__h4031,
	       y_avValue_fst__h3140,
	       y_avValue_fst__h3367;
  wire IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d148,
       IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d167,
       IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d187,
       IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d200,
       IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d262,
       NOT_ras_top_index_port0__read__69_EQ_0_70_71_A_ETC___d183,
       x_port1__read__h5049;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // action method stall_fetch
  assign RDY_stall_fetch = 1'd1 ;
  assign CAN_FIRE_stall_fetch = 1'd1 ;
  assign WILL_FIRE_stall_fetch = EN_stall_fetch ;

  // actionvalue method request_to_imem_get
  assign request_to_imem_get =
	     { generate_pc$D_OUT[79:78],
	       generate_pc$D_OUT[38:0],
	       generate_pc$D_OUT[77:39],
	       rg_fence,
	       y__h2431 } ;
  assign RDY_request_to_imem_get =
	     tx_out_notFull_b && (!EN_stall_fetch || !stall_fetch_stall) &&
	     generate_pc$EMPTY_N ;
  assign CAN_FIRE_request_to_imem_get =
	     tx_out_notFull_b && (!EN_stall_fetch || !stall_fetch_stall) &&
	     generate_pc$EMPTY_N ;
  assign WILL_FIRE_request_to_imem_get = EN_request_to_imem_get ;

  // action method instruction_response_from_imem
  assign RDY_instruction_response_from_imem = ff_response_to_cpu_ff$FULL_N ;
  assign CAN_FIRE_instruction_response_from_imem =
	     ff_response_to_cpu_ff$FULL_N ;
  assign WILL_FIRE_instruction_response_from_imem =
	     EN_instruction_response_from_imem ;

  // action method prediction_response_put
  assign RDY_prediction_response_put = generate_pc$FULL_N ;
  assign CAN_FIRE_prediction_response_put = generate_pc$FULL_N ;
  assign WILL_FIRE_prediction_response_put = EN_prediction_response_put ;

  // actionvalue method send_prediction_request_get
  assign send_prediction_request_get = { x__h5179, x__h5220 } ;
  assign RDY_send_prediction_request_get = 1'd1 ;
  assign CAN_FIRE_send_prediction_request_get = 1'd1 ;
  assign WILL_FIRE_send_prediction_request_get =
	     EN_send_prediction_request_get ;

  // action method tx_out_notFull
  assign CAN_FIRE_tx_out_notFull = 1'd1 ;
  assign WILL_FIRE_tx_out_notFull = 1'd1 ;

  // action method tx_out_enq_rdy
  assign CAN_FIRE_tx_out_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_out_enq_rdy = 1'd1 ;

  // value method tx_out_enq_ena
  assign tx_out_enq_ena = tx_w_ena$whas ;

  // value method tx_out_enq_data
  assign tx_out_enq_data =
	     { tx_w_data$wget[184:114],
	       IF_tx_w_data_whas__36_AND_tx_w_data_wget__37_B_ETC___d554,
	       tx_w_data$wget[106:0] } ;

  // action method push_ras
  assign RDY_push_ras = 1'd1 ;
  assign CAN_FIRE_push_ras = 1'd1 ;
  assign WILL_FIRE_push_ras = EN_push_ras ;

  // action method update_eEpoch
  assign RDY_update_eEpoch = 1'd1 ;
  assign CAN_FIRE_update_eEpoch = 1'd1 ;
  assign WILL_FIRE_update_eEpoch = EN_update_eEpoch ;

  // action method update_wEpoch
  assign RDY_update_wEpoch = 1'd1 ;
  assign CAN_FIRE_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_update_wEpoch = EN_update_wEpoch ;

  // submodule ff_response_to_cpu_ff
  FIFO1 #(.width(32'd186), .guarded(32'd0)) ff_response_to_cpu_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(ff_response_to_cpu_ff$D_IN),
								  .ENQ(ff_response_to_cpu_ff$ENQ),
								  .DEQ(ff_response_to_cpu_ff$DEQ),
								  .CLR(ff_response_to_cpu_ff$CLR),
								  .D_OUT(ff_response_to_cpu_ff$D_OUT),
								  .FULL_N(ff_response_to_cpu_ff$FULL_N),
								  .EMPTY_N(ff_response_to_cpu_ff$EMPTY_N));

  // submodule ff_response_to_cpu_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ff_response_to_cpu_firstValid(.CLK(CLK),
							 .D_IN(ff_response_to_cpu_firstValid$D_IN),
							 .EN(ff_response_to_cpu_firstValid$EN),
							 .Q_OUT(ff_response_to_cpu_firstValid$Q_OUT));

  // submodule generate_pc
  FIFOL1 #(.width(32'd80)) generate_pc(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(generate_pc$D_IN),
				       .ENQ(generate_pc$ENQ),
				       .DEQ(generate_pc$DEQ),
				       .CLR(generate_pc$CLR),
				       .D_OUT(generate_pc$D_OUT),
				       .FULL_N(generate_pc$FULL_N),
				       .EMPTY_N(generate_pc$EMPTY_N));

  // submodule ras_array_reg
  RegFile #(.addr_width(32'd3),
	    .data_width(32'd39),
	    .lo(3'd0),
	    .hi(3'd7)) ras_array_reg(.CLK(CLK),
				     .ADDR_1(ras_array_reg$ADDR_1),
				     .ADDR_2(ras_array_reg$ADDR_2),
				     .ADDR_3(ras_array_reg$ADDR_3),
				     .ADDR_4(ras_array_reg$ADDR_4),
				     .ADDR_5(ras_array_reg$ADDR_5),
				     .ADDR_IN(ras_array_reg$ADDR_IN),
				     .D_IN(ras_array_reg$D_IN),
				     .WE(ras_array_reg$WE),
				     .D_OUT_1(ras_array_reg$D_OUT_1),
				     .D_OUT_2(),
				     .D_OUT_3(),
				     .D_OUT_4(),
				     .D_OUT_5());

  // rule RL_get_instruction_from_cache
  assign CAN_FIRE_RL_get_instruction_from_cache =
	     ff_response_to_cpu_dequeueing$whas ;
  assign WILL_FIRE_RL_get_instruction_from_cache =
	     ff_response_to_cpu_dequeueing$whas ;

  // rule RL_enque_new_pc
  assign CAN_FIRE_RL_enque_new_pc =
	     generate_pc$FULL_N && wr_flush_prediction$whas &&
	     wr_flush_prediction$wget[39] ;
  assign WILL_FIRE_RL_enque_new_pc = CAN_FIRE_RL_enque_new_pc && !EN_flush ;

  // rule RL_ff_response_to_cpu_enqueue
  assign CAN_FIRE_RL_ff_response_to_cpu_enqueue =
	     ff_response_to_cpu_enqw$whas &&
	     (!ff_response_to_cpu_dequeueing$whas ||
	      ff_response_to_cpu_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ff_response_to_cpu_enqueue =
	     CAN_FIRE_RL_ff_response_to_cpu_enqueue ;

  // rule RL_ff_response_to_cpu_dequeue
  assign CAN_FIRE_RL_ff_response_to_cpu_dequeue =
	     ff_response_to_cpu_dequeueing$whas &&
	     ff_response_to_cpu_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ff_response_to_cpu_dequeue =
	     CAN_FIRE_RL_ff_response_to_cpu_dequeue ;

  // inputs to muxes for submodule ports
  assign MUX_generate_pc$enq_1__SEL_2 =
	     EN_prediction_response_put &&
	     prediction_response_put[82:80] == x__h5179 &&
	     (!wr_flush_prediction$whas || !wr_flush_prediction$wget[39]) ;
  assign MUX_generate_pc$enq_1__VAL_1 =
	     { 2'b0, wr_flush_prediction$wget[38:0], x__h4118 } ;
  assign MUX_generate_pc$enq_1__VAL_2 =
	     { prediction_response_put[1:0],
	       prediction_response_put[79:41],
	       _theResult____h5056 } ;

  // inlined wires
  assign wr_flush_prediction$wget =
	     { 1'd1,
	       IF_IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_ETC___d193 } ;
  assign wr_flush_prediction$whas =
	     WILL_FIRE_RL_get_instruction_from_cache &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d148 &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d187 ;
  assign ff_response_to_cpu_enqw$wget =
	     { instruction_response_from_imem_x[185:74],
	       CASE_instruction_response_from_imem_x_BITS_73__ETC__q3,
	       instruction_response_from_imem_x[66:0] } ;
  assign ff_response_to_cpu_enqw$whas =
	     EN_instruction_response_from_imem &&
	     instruction_response_from_imem_x[186] ;
  assign tx_w_ena$whas =
	     WILL_FIRE_RL_get_instruction_from_cache &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d148 ;
  assign tx_w_data$wget =
	     { pc__h2363,
	       IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150,
	       IF_IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_ETC___d311,
	       x__h4028,
	       x__h4031,
	       perfmonitors__h2373,
	       eEpoch,
	       wEpoch } ;
  assign ff_response_to_cpu_dequeueing$whas =
	     ff_response_to_cpu_firstValid$Q_OUT &&
	     (ff_response_to_cpu_ff$EMPTY_N ||
	      ff_response_to_cpu_enqw$whas) &&
	     tx_out_enq_rdy_b ;
  assign rg_programcounter$port1__read =
	     MUX_generate_pc$enq_1__SEL_2 ?
	       _theResult____h5056 :
	       rg_programcounter ;
  assign iEpoch$EN_port0__write =
	     WILL_FIRE_RL_get_instruction_from_cache &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d148 &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d187 ;
  assign rg_fence$port1__read = !EN_request_to_imem_get && rg_fence ;
  assign rg_fence$EN_port1__write = EN_flush && flush_fl == 2'd1 ;
  assign rg_fence$port2__read =
	     rg_fence$EN_port1__write || rg_fence$port1__read ;
  assign ras_top_index$EN_port0__write =
	     WILL_FIRE_RL_get_instruction_from_cache &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d148 &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[6:4] ==
	     3'b110 &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d167 &&
	     ras_top_index != 3'd0 ;
  assign ras_top_index$port0__write_1 = ras_top_index - 3'd1 ;
  assign ras_top_index$EN_port1__write = EN_push_ras && push_ras_addr[39] ;
  assign ras_top_index$port1__write_1 = x_port1__read__h5787 + 3'd1 ;
  assign ras_top_index$port2__read =
	     ras_top_index$EN_port1__write ?
	       ras_top_index$port1__write_1 :
	       x_port1__read__h5787 ;

  // register eEpoch
  assign eEpoch$D_IN = ~eEpoch ;
  assign eEpoch$EN = EN_update_eEpoch ;

  // register iEpoch
  assign iEpoch$D_IN = x_port1__read__h5049 ;
  assign iEpoch$EN = 1'b1 ;

  // register ras_top_index
  assign ras_top_index$D_IN = ras_top_index$port2__read ;
  assign ras_top_index$EN = 1'b1 ;

  // register rg_fence
  assign rg_fence$D_IN = rg_fence$port2__read ;
  assign rg_fence$EN = 1'b1 ;

  // register rg_programcounter
  assign rg_programcounter$D_IN = b__h5196 ;
  assign rg_programcounter$EN = 1'b1 ;

  // register wEpoch
  assign wEpoch$D_IN = ~wEpoch ;
  assign wEpoch$EN = EN_update_wEpoch ;

  // submodule ff_response_to_cpu_ff
  assign ff_response_to_cpu_ff$D_IN =
	     { ab__h1172[185:74],
	       IF_ff_response_to_cpu_enqw_wget_BITS_73_TO_72__ETC___d129 } ;
  assign ff_response_to_cpu_ff$ENQ = CAN_FIRE_RL_ff_response_to_cpu_enqueue ;
  assign ff_response_to_cpu_ff$DEQ = CAN_FIRE_RL_ff_response_to_cpu_dequeue ;
  assign ff_response_to_cpu_ff$CLR = 1'b0 ;

  // submodule ff_response_to_cpu_firstValid
  assign ff_response_to_cpu_firstValid$D_IN = 1'd1 ;
  assign ff_response_to_cpu_firstValid$EN =
	     ff_response_to_cpu_dequeueing$whas ;

  // submodule generate_pc
  assign generate_pc$D_IN =
	     WILL_FIRE_RL_enque_new_pc ?
	       MUX_generate_pc$enq_1__VAL_1 :
	       MUX_generate_pc$enq_1__VAL_2 ;
  assign generate_pc$ENQ =
	     MUX_generate_pc$enq_1__SEL_2 || WILL_FIRE_RL_enque_new_pc ;
  assign generate_pc$DEQ = EN_request_to_imem_get && !rg_fence ;
  assign generate_pc$CLR = EN_flush ;

  // submodule ras_array_reg
  assign ras_array_reg$ADDR_1 = ras_top_index$port0__write_1 ;
  assign ras_array_reg$ADDR_2 = 3'h0 ;
  assign ras_array_reg$ADDR_3 = 3'h0 ;
  assign ras_array_reg$ADDR_4 = 3'h0 ;
  assign ras_array_reg$ADDR_5 = 3'h0 ;
  assign ras_array_reg$ADDR_IN = x_port1__read__h5787 ;
  assign ras_array_reg$D_IN = push_ras_addr[38:0] ;
  assign ras_array_reg$WE = EN_push_ras && push_ras_addr[39] ;

  // remaining internal signals
  assign IF_IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_ETC___d193 =
	     (IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[6:4] ==
	      3'b110 &&
	      IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d167) ?
	       ras_array_reg$D_OUT_1 :
	       pc__h2363 + 39'd4 ;
  assign IF_IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_ETC___d311 =
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d200 ?
	       { 2'd0,
		 CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 } :
	       (IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d262 ?
		  { 2'd1,
		    1'b0 /* unspecified value */ ,
		    CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 } :
		  { 2'd2, 5'b01010 /* unspecified value */  }) ;
  assign IF_ff_response_to_cpu_enqw_wget_BITS_73_TO_72__ETC___d129 =
	     { CASE_ab172_BITS_73_TO_72_0_0_CONCAT_CASE_IF_ff_ETC__q10,
	       ab__h1172[66:0] } ;
  assign IF_ff_response_to_cpu_ff_i_notEmpty_THEN_IF_ff_ETC___d286 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 :
	       IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 ;
  assign IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d148 =
	     epoch__h2374 == y__h2431 ;
  assign IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[105:74] :
	       ab__h1172[105:74] ;
  assign IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d167 =
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[2] &&
	     (IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[11:10] !=
	      2'b0 ||
	      IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[8:7] !=
	      2'b01) &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[19:18] ==
	     2'b0 &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[16:15] ==
	     2'b01 ;
  assign IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d187 =
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[6:4] ==
	     3'b110 &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d167 &&
	     NOT_ras_top_index_port0__read__69_EQ_0_70_71_A_ETC___d183 ||
	     prediction__h2365[1] &&
	     IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[6:4] !=
	     3'b110 ;
  assign IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d200 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[73:72] == 2'd0 :
	       ff_response_to_cpu_enqw$whas && ab__h1172[73:72] == 2'd0 ;
  assign IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d262 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[73:72] == 2'd1 :
	       ff_response_to_cpu_enqw$whas && ab__h1172[73:72] == 2'd1 ;
  assign IF_tx_w_data_whas__36_AND_tx_w_data_wget__37_B_ETC___d553 =
	     (tx_w_ena$whas && tx_w_data$wget[113:112] == 2'd1) ?
	       { 2'd1,
		 1'b0 /* unspecified value */ ,
		 CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 } :
	       { 2'd2, 5'b01010 /* unspecified value */  } ;
  assign IF_tx_w_data_whas__36_AND_tx_w_data_wget__37_B_ETC___d554 =
	     (tx_w_ena$whas && tx_w_data$wget[113:112] == 2'd0) ?
	       { 2'd0,
		 CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 } :
	       IF_tx_w_data_whas__36_AND_tx_w_data_wget__37_B_ETC___d553 ;
  assign NOT_ras_top_index_port0__read__69_EQ_0_70_71_A_ETC___d183 =
	     ras_top_index != 3'd0 &&
	     (ras_array_reg$D_OUT_1 != npc__h2367 || !prediction__h2365[1]) ;
  assign _theResult____h5056 =
	     prediction_response_put[1] ?
	       prediction_response_put[40:2] :
	       npc___1__h5136 ;
  assign ab__h1172 = ff_response_to_cpu_enqw$wget ;
  assign b__h5196 = EN_flush ? flush_new_pc : rg_programcounter$port1__read ;
  assign epoch__h2374 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[2:0] :
	       ab__h1172[2:0] ;
  assign npc___1__h5136 = prediction_response_put[79:41] + 39'd4 ;
  assign npc__h2367 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[144:106] :
	       ab__h1172[144:106] ;
  assign pc__h2363 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[185:147] :
	       ab__h1172[185:147] ;
  assign perfmonitors__h2373 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[66:3] :
	       ab__h1172[66:3] ;
  assign prediction__h2365 =
	     ff_response_to_cpu_ff$EMPTY_N ?
	       ff_response_to_cpu_ff$D_OUT[146:145] :
	       ab__h1172[146:145] ;
  assign v__h3156 =
	     (prediction__h2365[1] &&
	      IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[6:4] !=
	      3'b110) ?
	       v__h3216 :
	       prediction__h2365 ;
  assign v__h3216 = { 1'd0, prediction__h2365[0] } ;
  assign x__h4028 =
	     (IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[6:4] ==
	      3'b110 &&
	      IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d167) ?
	       y_avValue_snd__h3368 :
	       npc__h2367 ;
  assign x__h4031 =
	     (IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d150[6:4] ==
	      3'b110 &&
	      IF_ff_response_to_cpu_ff_i_notEmpty_THEN_ff_re_ETC___d167) ?
	       y_avValue_fst__h3367 :
	       v__h3156 ;
  assign x__h4118 = wr_flush_prediction$wget[38:0] + 39'd4 ;
  assign x__h5179 = { x_port1__read__h5049, eEpoch, wEpoch } ;
  assign x__h5220 =
	     (wr_flush_prediction$whas && wr_flush_prediction$wget[39]) ?
	       x__h4118 :
	       b__h5196 ;
  assign x_port1__read__h5049 = iEpoch$EN_port0__write ? ~iEpoch : iEpoch ;
  assign x_port1__read__h5787 =
	     ras_top_index$EN_port0__write ?
	       ras_top_index$port0__write_1 :
	       ras_top_index ;
  assign y__h2431 = { iEpoch, eEpoch, wEpoch } ;
  assign y_avValue_fst__h3140 =
	     (ras_array_reg$D_OUT_1 != npc__h2367 || !prediction__h2365[1]) ?
	       2'b10 :
	       prediction__h2365 ;
  assign y_avValue_fst__h3367 =
	     (ras_top_index == 3'd0) ?
	       prediction__h2365 :
	       y_avValue_fst__h3140 ;
  assign y_avValue_snd__h3141 =
	     (ras_array_reg$D_OUT_1 != npc__h2367 || !prediction__h2365[1]) ?
	       ras_array_reg$D_OUT_1 :
	       npc__h2367 ;
  assign y_avValue_snd__h3368 =
	     (ras_top_index == 3'd0) ? npc__h2367 : y_avValue_snd__h3141 ;
  always@(instruction_response_from_imem_x)
  begin
    case (instruction_response_from_imem_x[71:67])
      5'd0,
      5'd1,
      5'd2,
      5'd3,
      5'd4,
      5'd5,
      5'd6,
      5'd7,
      5'd8,
      5'd9,
      5'd11,
      5'd12,
      5'd13,
      5'd15:
	  CASE_instruction_response_from_imem_x_BITS_71__ETC__q1 =
	      instruction_response_from_imem_x[71:67];
      default: CASE_instruction_response_from_imem_x_BITS_71__ETC__q1 = 5'd16;
    endcase
  end
  always@(instruction_response_from_imem_x)
  begin
    case (instruction_response_from_imem_x[70:67])
      4'd0, 4'd1, 4'd3, 4'd4, 4'd5, 4'd7, 4'd8, 4'd9, 4'd11, 4'd12, 4'd13:
	  CASE_instruction_response_from_imem_x_BITS_70__ETC__q2 =
	      instruction_response_from_imem_x[70:67];
      default: CASE_instruction_response_from_imem_x_BITS_70__ETC__q2 = 4'd14;
    endcase
  end
  always@(instruction_response_from_imem_x or
	  CASE_instruction_response_from_imem_x_BITS_71__ETC__q1 or
	  CASE_instruction_response_from_imem_x_BITS_70__ETC__q2)
  begin
    case (instruction_response_from_imem_x[73:72])
      2'd0:
	  CASE_instruction_response_from_imem_x_BITS_73__ETC__q3 =
	      { 2'd0,
		CASE_instruction_response_from_imem_x_BITS_71__ETC__q1 };
      2'd1:
	  CASE_instruction_response_from_imem_x_BITS_73__ETC__q3 =
	      { instruction_response_from_imem_x[73:72],
		1'b0 /* unspecified value */ ,
		CASE_instruction_response_from_imem_x_BITS_70__ETC__q2 };
      default: CASE_instruction_response_from_imem_x_BITS_73__ETC__q3 =
		   { 2'd2, 5'b01010 /* unspecified value */  };
    endcase
  end
  always@(ab__h1172)
  begin
    case (ab__h1172[71:67])
      5'd0: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd0;
      5'd1: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd1;
      5'd2: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd2;
      5'd3: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd3;
      5'd4: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd4;
      5'd5: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd5;
      5'd6: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd6;
      5'd7: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd7;
      5'd8: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd8;
      5'd9: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd9;
      5'd11: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd10;
      5'd12: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd11;
      5'd13: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd12;
      5'd15: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 = 4'd13;
      default: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47 =
		   4'd14;
    endcase
  end
  always@(ab__h1172)
  begin
    case (ab__h1172[70:67])
      4'd0, 4'd1:
	  IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 =
	      ab__h1172[70:67];
      4'd3: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd2;
      4'd4: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd3;
      4'd5: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd4;
      4'd7: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd5;
      4'd8: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd6;
      4'd9: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd7;
      4'd11: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd8;
      4'd12: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd9;
      4'd13:
	  IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 = 4'd10;
      default: IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101 =
		   4'd11;
    endcase
  end
  always@(ff_response_to_cpu_ff$D_OUT)
  begin
    case (ff_response_to_cpu_ff$D_OUT[70:67])
      4'd0, 4'd1:
	  CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 =
	      ff_response_to_cpu_ff$D_OUT[70:67];
      4'd3: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd2;
      4'd4: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd3;
      4'd5: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd4;
      4'd7: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd5;
      4'd8: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd6;
      4'd9: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd7;
      4'd11: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd8;
      4'd12: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd9;
      4'd13: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd10;
      default: CASE_ff_response_to_cpu_ffD_OUT_BITS_70_TO_67_ETC__q4 = 4'd11;
    endcase
  end
  always@(ff_response_to_cpu_ff$D_OUT)
  begin
    case (ff_response_to_cpu_ff$D_OUT[71:67])
      5'd0: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd0;
      5'd1: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd1;
      5'd2: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd2;
      5'd3: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd3;
      5'd4: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd4;
      5'd5: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd5;
      5'd6: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd6;
      5'd7: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd7;
      5'd8: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd8;
      5'd9: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd9;
      5'd11: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd10;
      5'd12: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd11;
      5'd13: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd12;
      5'd15: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd13;
      default: CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 = 4'd14;
    endcase
  end
  always@(ff_response_to_cpu_ff$EMPTY_N or
	  CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 or
	  IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47)
  begin
    case (ff_response_to_cpu_ff$EMPTY_N ?
	    CASE_ff_response_to_cpu_ffD_OUT_BITS_71_TO_67_ETC__q5 :
	    IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47)
      4'd0: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd0;
      4'd1: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd1;
      4'd2: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd2;
      4'd3: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd3;
      4'd4: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd4;
      4'd5: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd5;
      4'd6: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd6;
      4'd7: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd7;
      4'd8: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd8;
      4'd9: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd9;
      4'd10: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd11;
      4'd11: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd12;
      4'd12: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd13;
      4'd13: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd15;
      default: CASE_IF_ff_response_to_cpu_ffEMPTY_N_THEN_CAS_ETC__q6 = 5'd16;
    endcase
  end
  always@(IF_ff_response_to_cpu_ff_i_notEmpty_THEN_IF_ff_ETC___d286)
  begin
    case (IF_ff_response_to_cpu_ff_i_notEmpty_THEN_IF_ff_ETC___d286)
      4'd0, 4'd1:
	  CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 =
	      IF_ff_response_to_cpu_ff_i_notEmpty_THEN_IF_ff_ETC___d286;
      4'd2: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd3;
      4'd3: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd4;
      4'd4: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd5;
      4'd5: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd7;
      4'd6: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd8;
      4'd7: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd9;
      4'd8: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd11;
      4'd9: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd12;
      4'd10: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd13;
      default: CASE_IF_ff_response_to_cpu_ff_i_notEmpty_THEN__ETC__q7 = 4'd14;
    endcase
  end
  always@(tx_w_data$wget)
  begin
    case (tx_w_data$wget[110:107])
      4'd0, 4'd1:
	  IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 =
	      tx_w_data$wget[110:107];
      4'd3: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd2;
      4'd4: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd3;
      4'd5: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd4;
      4'd7: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd5;
      4'd8: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd6;
      4'd9: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd7;
      4'd11: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd8;
      4'd12: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd9;
      4'd13:
	  IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 = 4'd10;
      default: IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529 =
		   4'd11;
    endcase
  end
  always@(IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47)
  begin
    case (IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d47)
      4'd0: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd0;
      4'd1: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd1;
      4'd2: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd2;
      4'd3: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd3;
      4'd4: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd4;
      4'd5: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd5;
      4'd6: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd6;
      4'd7: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd7;
      4'd8: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd8;
      4'd9: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd9;
      4'd10: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd11;
      4'd11: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd12;
      4'd12: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd13;
      4'd13: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd15;
      default: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 = 5'd16;
    endcase
  end
  always@(IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101)
  begin
    case (IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101)
      4'd0, 4'd1:
	  CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 =
	      IF_ff_response_to_cpu_enqw_whas_THEN_IF_ff_res_ETC___d101;
      4'd2: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd3;
      4'd3: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd4;
      4'd4: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd5;
      4'd5: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd7;
      4'd6: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd8;
      4'd7: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd9;
      4'd8: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd11;
      4'd9: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd12;
      4'd10: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd13;
      default: CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 = 4'd14;
    endcase
  end
  always@(ab__h1172 or
	  CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 or
	  CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9)
  begin
    case (ab__h1172[73:72])
      2'd0:
	  CASE_ab172_BITS_73_TO_72_0_0_CONCAT_CASE_IF_ff_ETC__q10 =
	      { 2'd0,
		CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q8 };
      2'd1:
	  CASE_ab172_BITS_73_TO_72_0_0_CONCAT_CASE_IF_ff_ETC__q10 =
	      { ab__h1172[73:72],
		1'b0 /* unspecified value */ ,
		CASE_IF_ff_response_to_cpu_enqw_whas_THEN_IF_f_ETC__q9 };
      default: CASE_ab172_BITS_73_TO_72_0_0_CONCAT_CASE_IF_ff_ETC__q10 =
		   { 2'd2, 5'b01010 /* unspecified value */  };
    endcase
  end
  always@(IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529)
  begin
    case (IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529)
      4'd0, 4'd1:
	  CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 =
	      IF_tx_w_data_whas__36_THEN_IF_tx_w_data_wget___ETC___d529;
      4'd2: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd3;
      4'd3: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd4;
      4'd4: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd5;
      4'd5: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd7;
      4'd6: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd8;
      4'd7: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd9;
      4'd8: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd11;
      4'd9: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd12;
      4'd10: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 = 4'd13;
      default: CASE_IF_tx_w_data_whas__36_THEN_IF_tx_w_data_w_ETC__q11 =
		   4'd14;
    endcase
  end
  always@(tx_w_data$wget)
  begin
    case (tx_w_data$wget[111:107])
      5'd0: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd0;
      5'd1: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd1;
      5'd2: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd2;
      5'd3: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd3;
      5'd4: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd4;
      5'd5: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd5;
      5'd6: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd6;
      5'd7: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd7;
      5'd8: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd8;
      5'd9: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd9;
      5'd11: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd10;
      5'd12: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd11;
      5'd13: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd12;
      5'd15: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd13;
      default: CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12 = 4'd14;
    endcase
  end
  always@(CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12)
  begin
    case (CASE_tx_w_datawget_BITS_111_TO_107_0_0_1_1_2__ETC__q12)
      4'd0: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd0;
      4'd1: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd1;
      4'd2: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd2;
      4'd3: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd3;
      4'd4: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd4;
      4'd5: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd5;
      4'd6: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd6;
      4'd7: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd7;
      4'd8: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd8;
      4'd9: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd9;
      4'd10: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd11;
      4'd11: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd12;
      4'd12: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd13;
      4'd13: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 = 5'd15;
      default: CASE_CASE_tx_w_datawget_BITS_111_TO_107_0_0_1__ETC__q13 =
		   5'd16;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	iEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ras_top_index <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_fence <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_programcounter <= `BSV_ASSIGNMENT_DELAY reset_vector;
	wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (eEpoch$EN) eEpoch <= `BSV_ASSIGNMENT_DELAY eEpoch$D_IN;
	if (iEpoch$EN) iEpoch <= `BSV_ASSIGNMENT_DELAY iEpoch$D_IN;
	if (ras_top_index$EN)
	  ras_top_index <= `BSV_ASSIGNMENT_DELAY ras_top_index$D_IN;
	if (rg_fence$EN) rg_fence <= `BSV_ASSIGNMENT_DELAY rg_fence$D_IN;
	if (rg_programcounter$EN)
	  rg_programcounter <= `BSV_ASSIGNMENT_DELAY rg_programcounter$D_IN;
	if (wEpoch$EN) wEpoch <= `BSV_ASSIGNMENT_DELAY wEpoch$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    eEpoch = 1'h0;
    iEpoch = 1'h0;
    ras_top_index = 3'h2;
    rg_fence = 1'h0;
    rg_programcounter = 39'h2AAAAAAAAA;
    wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfetch

