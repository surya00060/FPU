//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jul 12 20:26:27 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1 reg
// get_result                     O    37
// RDY_get_result                 O     1
// RDY_flush                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start__operand1               I    32
// _start__operand2               I    32
// _start__operand3               I    32 reg
// _start_rounding_mode           I     3 reg
// _start_operation               I     1 reg
// _start__negate                 I     1 reg
// _start_mul                     I     1 reg
// _start_muladd                  I     1 reg
// _start_flags                   I    15
// EN__start                      I     1
// EN_flush                       I     1
//
// Combinational paths from inputs to outputs:
//   EN_flush -> get_result
//   EN_flush -> RDY_get_result
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_fm_add_sub32(CLK,
			  RST_N,

			  _start__operand1,
			  _start__operand2,
			  _start__operand3,
			  _start_rounding_mode,
			  _start_operation,
			  _start__negate,
			  _start_mul,
			  _start_muladd,
			  _start_flags,
			  EN__start,
			  RDY__start,

			  get_result,
			  RDY_get_result,

			  EN_flush,
			  RDY_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [31 : 0] _start__operand1;
  input  [31 : 0] _start__operand2;
  input  [31 : 0] _start__operand3;
  input  [2 : 0] _start_rounding_mode;
  input  _start_operation;
  input  _start__negate;
  input  _start_mul;
  input  _start_muladd;
  input  [14 : 0] _start_flags;
  input  EN__start;
  output RDY__start;

  // value method get_result
  output [36 : 0] get_result;
  output RDY_get_result;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // signals for module outputs
  wire [36 : 0] get_result;
  wire RDY__start, RDY_flush, RDY_get_result;

  // register uut_rg_state_handler
  reg [2 : 0] uut_rg_state_handler;
  reg [2 : 0] uut_rg_state_handler$D_IN;
  wire uut_rg_state_handler$EN;

  // ports of submodule uut_ff_input_fifo
  wire [107 : 0] uut_ff_input_fifo$D_IN, uut_ff_input_fifo$D_OUT;
  wire uut_ff_input_fifo$CLR,
       uut_ff_input_fifo$DEQ,
       uut_ff_input_fifo$EMPTY_N,
       uut_ff_input_fifo$ENQ,
       uut_ff_input_fifo$FULL_N;

  // ports of submodule uut_ff_stage2_fifo
  wire [110 : 0] uut_ff_stage2_fifo$D_IN, uut_ff_stage2_fifo$D_OUT;
  wire uut_ff_stage2_fifo$CLR,
       uut_ff_stage2_fifo$DEQ,
       uut_ff_stage2_fifo$EMPTY_N,
       uut_ff_stage2_fifo$ENQ,
       uut_ff_stage2_fifo$FULL_N;

  // ports of submodule uut_ff_stage4_fifo
  wire [171 : 0] uut_ff_stage4_fifo$D_IN, uut_ff_stage4_fifo$D_OUT;
  wire uut_ff_stage4_fifo$CLR,
       uut_ff_stage4_fifo$DEQ,
       uut_ff_stage4_fifo$EMPTY_N,
       uut_ff_stage4_fifo$ENQ,
       uut_ff_stage4_fifo$FULL_N;

  // ports of submodule uut_ff_stage5_fifo
  wire [105 : 0] uut_ff_stage5_fifo$D_IN, uut_ff_stage5_fifo$D_OUT;
  wire uut_ff_stage5_fifo$CLR,
       uut_ff_stage5_fifo$DEQ,
       uut_ff_stage5_fifo$EMPTY_N,
       uut_ff_stage5_fifo$ENQ,
       uut_ff_stage5_fifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_uut_rl_flush,
       CAN_FIRE_RL_uut_rl_stage1_after_input_stage,
       CAN_FIRE_RL_uut_rl_stage4,
       CAN_FIRE_RL_uut_rl_stage_3,
       CAN_FIRE_RL_uut_rl_stage_5_final_stage,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       WILL_FIRE_RL_uut_rl_flush,
       WILL_FIRE_RL_uut_rl_stage1_after_input_stage,
       WILL_FIRE_RL_uut_rl_stage4,
       WILL_FIRE_RL_uut_rl_stage_3,
       WILL_FIRE_RL_uut_rl_stage_5_final_stage,
       WILL_FIRE__start,
       WILL_FIRE_flush;

  // remaining internal signals
  reg _theResult_____7__h44653;
  wire [95 : 0] _0_CONCAT_INV_start_flags_BIT_14_36_OR_start_fl_ETC___d952;
  wire [72 : 0] IF_IF_uut_ff_stage2_fifo_first__06_BIT_5_10_TH_ETC___d342,
		IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785,
		_theResult____h11962,
		_theResult____h33697,
		add_mantissa__h33693,
		mantissa2__h11949,
		mantissa2__h11971,
		mantissa2__h11992,
		mantissa3___1__h21143,
		mantissa3__h11993,
		mantissa_to_shift___1__h11990,
		mantissa_to_shift__h11985,
		resultant_mantissa___1__h44471,
		resultant_mantissa_norm_zerosMSB__h44183,
		sub_mantissa1__h33694,
		sub_mantissa2__h33695,
		sub_mantissa__h33696,
		y_avValue_snd_fst__h44694,
		y_avValue_snd_fst__h44762,
		y_avValue_snd_fst__h44769;
  wire [48 : 0] IF_uut_ff_input_fifo_first__4_BIT_107_0_THEN_0_ETC___d42,
		_theResult_____1_snd__h11713,
		_theResult_____1_snd__h11716,
		lv_product_mantissa___1__h8093,
		lv_product_mantissa___1__h8112,
		lv_product_mantissa__h705,
		lv_product_mantissa__h8060,
		lv_product_mantissa_shiftL_expo__h8068,
		lv_product_mantissa_shiftL_zerosMSB__h8070,
		x__h11748,
		y_avValue_snd_fst__h11750;
  wire [31 : 0] _theResult_____3_snd_snd__h45360,
		_theResult_____3_snd_snd__h45362,
		_theResult_____3_snd_snd__h45364,
		_theResult_____3_snd_snd_snd__h45358,
		lv_final_output__h45047,
		lv_final_output__h45171,
		lv_final_output__h45422,
		lv_final_output__h45443;
  wire [30 : 0] IF_NOT_IF_uut_ff_stage5_fifo_first__47_BIT_95__ETC___d866;
  wire [24 : 0] IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d863,
		_theResult_____5__h45005,
		lv_rounded_mantissa___1__h45025,
		lv_rounded_mantissa__h45290;
  wire [23 : 0] x__h46257, x__h46274;
  wire [9 : 0] IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d836,
	       IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d766,
	       _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d754,
	       _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32,
	       _theResult_____1_fst__h11712,
	       _theResult_____1_fst__h11715,
	       _theResult_____4_snd_fst__h12152,
	       exp1_temp__h46051,
	       exp2_temp__h46052,
	       exponent2__h11972,
	       exponent3__h11951,
	       exponent3__h11963,
	       exponent_difference__h11986,
	       lv_minuend__h11982,
	       lv_product_exponent___1__h8094,
	       lv_product_exponent__h8058,
	       lv_product_exponent_inc_shift__h8066,
	       lv_product_exponent_sub_shift__h8069,
	       lv_product_exponent_sub_zerosMSB__h8071,
	       lv_summed_exponent__h46053,
	       resultant_exponent___1__h45289,
	       resultant_exponent__h44450,
	       resultant_exponent_inc__h44181,
	       resultant_exponent_sub__h44179,
	       resultant_exponent_sub_zerosMSB__h44184,
	       shift_neg__h8067,
	       uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d16,
	       x__h11704,
	       x__h11744,
	       x__h46089,
	       x__h46091,
	       x__h46093,
	       y__h11743,
	       y__h46090,
	       y__h46092,
	       y_avValue_fst__h11667,
	       y_avValue_fst__h44428,
	       y_avValue_fst__h44442;
  wire [6 : 0] x__h28225, x__h33840, x__h44797;
  wire [5 : 0] lsb_zeros__h8064,
	       msb_zeros___1__h8096,
	       msb_zeros__h724,
	       msb_zeros__h8062,
	       x__h11718;
  wire [4 : 0] fflags__h45054;
  wire [1 : 0] IF_uut_ff_stage2_fifo_first__06_BITS_9_TO_7_11_ETC___d548,
	       _theResult_____6_snd_snd__h33400,
	       _theResult_____6_snd_snd_snd__h33447,
	       lv_result_is_infinity___1__h33401,
	       lv_result_is_infinity___1__h33463,
	       lv_result_is_zero___1__h33498,
	       lv_result_is_zero___1__h33502,
	       x__h33443,
	       x__h33484,
	       x__h33797;
  wire IF_IF_uut_ff_stage5_fifo_first__47_BIT_95_48_T_ETC___d881,
       IF_uut_ff_stage2_fifo_first__06_BIT_5_10_THEN__ETC___d318,
       IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768,
       INV_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT__ETC___d253,
       _0_CONCAT_IF_IF_IF_uut_ff_stage2_fifo_first__06_ETC___d496,
       _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757,
       _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d33,
       _theResult_____1__h33251,
       _theResult_____1_fst__h45084,
       _theResult_____3_fst__h45167,
       _theResult_____3_fst__h45345,
       _theResult_____3_snd_fst__h45169,
       _theResult_____3_snd_fst__h45363,
       _theResult_____3_snd_snd_fst__h45357,
       _theResult_____6__h44654,
       _theResult_____6_fst__h33397,
       _theResult___fst__h45921,
       _theResult___fst__h45929,
       ex_overflow__h45052,
       expo3_zero__h11960,
       lv_inexact__h44652,
       lv_inexact__h45053,
       lv_op1_subnormal__h45686,
       lv_op2_subnormal__h45687,
       lv_round_up___1__h44889,
       lv_round_up___1__h44926,
       lv_sticky___1__h8113,
       lv_sticky__h44650,
       op_xor_sign3__h11961,
       sign2__h11948,
       sign3__h11950,
       start_flags_BIT_10_99_OR_start_flags_BIT_12_00___d901,
       start_flags_BIT_12_00_AND_INV_start_flags_BIT__ETC___d961,
       start_flags_BIT_5_02_OR_start_flags_BIT_7_03___d904,
       uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18,
       uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d28,
       uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d35,
       uut_ff_stage2_fifo_first__06_BIT_15_25_OR_uut__ETC___d327,
       uut_ff_stage5_fifo_first__47_BIT_14_21_OR_uut__ETC___d887,
       v__h44546,
       x__h11824,
       x__h11830,
       x__h33293,
       x__h33305,
       x__h33310,
       x__h33323,
       x__h33435,
       x__h33475,
       x__h33477,
       x__h33479,
       x__h33480,
       x__h33514,
       x__h33526,
       x__h33558,
       x__h44902,
       x__h44938,
       x__h46284,
       x__h46308,
       x__h46309,
       x__h46310,
       x__h46321,
       x__h46334,
       x__h46420,
       x__h7856,
       y__h33306,
       y__h33476,
       y__h33478,
       y__h33527,
       y__h44901,
       y__h44954,
       y__h46335,
       y__h46337,
       y__h46379;

  // action method _start
  assign RDY__start = uut_ff_input_fifo$FULL_N ;
  assign CAN_FIRE__start = uut_ff_input_fifo$FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // value method get_result
  assign get_result = { lv_final_output__h45047, fflags__h45054 } ;
  assign RDY_get_result =
	     uut_ff_stage5_fifo$EMPTY_N && uut_rg_state_handler == 3'd4 &&
	     !EN_flush ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // submodule uut_ff_input_fifo
  FIFO2 #(.width(32'd108), .guarded(32'd1)) uut_ff_input_fifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(uut_ff_input_fifo$D_IN),
							      .ENQ(uut_ff_input_fifo$ENQ),
							      .DEQ(uut_ff_input_fifo$DEQ),
							      .CLR(uut_ff_input_fifo$CLR),
							      .D_OUT(uut_ff_input_fifo$D_OUT),
							      .FULL_N(uut_ff_input_fifo$FULL_N),
							      .EMPTY_N(uut_ff_input_fifo$EMPTY_N));

  // submodule uut_ff_stage2_fifo
  FIFO2 #(.width(32'd111), .guarded(32'd1)) uut_ff_stage2_fifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(uut_ff_stage2_fifo$D_IN),
							       .ENQ(uut_ff_stage2_fifo$ENQ),
							       .DEQ(uut_ff_stage2_fifo$DEQ),
							       .CLR(uut_ff_stage2_fifo$CLR),
							       .D_OUT(uut_ff_stage2_fifo$D_OUT),
							       .FULL_N(uut_ff_stage2_fifo$FULL_N),
							       .EMPTY_N(uut_ff_stage2_fifo$EMPTY_N));

  // submodule uut_ff_stage4_fifo
  FIFO2 #(.width(32'd172), .guarded(32'd1)) uut_ff_stage4_fifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(uut_ff_stage4_fifo$D_IN),
							       .ENQ(uut_ff_stage4_fifo$ENQ),
							       .DEQ(uut_ff_stage4_fifo$DEQ),
							       .CLR(uut_ff_stage4_fifo$CLR),
							       .D_OUT(uut_ff_stage4_fifo$D_OUT),
							       .FULL_N(uut_ff_stage4_fifo$FULL_N),
							       .EMPTY_N(uut_ff_stage4_fifo$EMPTY_N));

  // submodule uut_ff_stage5_fifo
  FIFO2 #(.width(32'd106), .guarded(32'd1)) uut_ff_stage5_fifo(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(uut_ff_stage5_fifo$D_IN),
							       .ENQ(uut_ff_stage5_fifo$ENQ),
							       .DEQ(uut_ff_stage5_fifo$DEQ),
							       .CLR(uut_ff_stage5_fifo$CLR),
							       .D_OUT(uut_ff_stage5_fifo$D_OUT),
							       .FULL_N(uut_ff_stage5_fifo$FULL_N),
							       .EMPTY_N(uut_ff_stage5_fifo$EMPTY_N));

  // rule RL_uut_rl_flush
  assign CAN_FIRE_RL_uut_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_uut_rl_flush = EN_flush ;

  // rule RL_uut_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_uut_rl_stage1_after_input_stage =
	     uut_ff_input_fifo$EMPTY_N && uut_ff_stage2_fifo$FULL_N &&
	     uut_rg_state_handler == 3'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_uut_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_uut_rl_stage1_after_input_stage ;

  // rule RL_uut_rl_stage_3
  assign CAN_FIRE_RL_uut_rl_stage_3 =
	     uut_ff_stage2_fifo$EMPTY_N && uut_ff_stage4_fifo$FULL_N &&
	     uut_rg_state_handler == 3'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_uut_rl_stage_3 = CAN_FIRE_RL_uut_rl_stage_3 ;

  // rule RL_uut_rl_stage4
  assign CAN_FIRE_RL_uut_rl_stage4 =
	     uut_ff_stage4_fifo$EMPTY_N && uut_ff_stage5_fifo$FULL_N &&
	     uut_rg_state_handler == 3'd3 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_uut_rl_stage4 = CAN_FIRE_RL_uut_rl_stage4 ;

  // rule RL_uut_rl_stage_5_final_stage
  assign CAN_FIRE_RL_uut_rl_stage_5_final_stage = RDY_get_result ;
  assign WILL_FIRE_RL_uut_rl_stage_5_final_stage = RDY_get_result ;

  // register uut_rg_state_handler
  always@(EN__start or
	  WILL_FIRE_RL_uut_rl_stage_5_final_stage or
	  WILL_FIRE_RL_uut_rl_stage4 or
	  WILL_FIRE_RL_uut_rl_stage_3 or
	  WILL_FIRE_RL_uut_rl_stage1_after_input_stage or EN_flush)
  case (1'b1)
    EN__start: uut_rg_state_handler$D_IN = 3'd1;
    WILL_FIRE_RL_uut_rl_stage_5_final_stage: uut_rg_state_handler$D_IN = 3'd0;
    WILL_FIRE_RL_uut_rl_stage4: uut_rg_state_handler$D_IN = 3'd4;
    WILL_FIRE_RL_uut_rl_stage_3: uut_rg_state_handler$D_IN = 3'd3;
    WILL_FIRE_RL_uut_rl_stage1_after_input_stage:
	uut_rg_state_handler$D_IN = 3'd2;
    EN_flush: uut_rg_state_handler$D_IN = 3'd0;
    default: uut_rg_state_handler$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign uut_rg_state_handler$EN =
	     WILL_FIRE_RL_uut_rl_stage_5_final_stage || EN_flush ||
	     EN__start ||
	     WILL_FIRE_RL_uut_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_uut_rl_stage_3 ||
	     WILL_FIRE_RL_uut_rl_stage4 ;

  // submodule uut_ff_input_fifo
  assign uut_ff_input_fifo$D_IN =
	     { _0_CONCAT_INV_start_flags_BIT_14_36_OR_start_fl_ETC___d952[47:0],
	       lv_summed_exponent__h46053,
	       x__h46284,
	       _start__operand3,
	       x__h46308,
	       x__h46309,
	       x__h46310,
	       _start_flags[4:0],
	       _start_rounding_mode,
	       _start_operation,
	       _start__negate,
	       _start_mul,
	       _start_muladd,
	       x__h46321,
	       x__h46420 } ;
  assign uut_ff_input_fifo$ENQ = EN__start ;
  assign uut_ff_input_fifo$DEQ = CAN_FIRE_RL_uut_rl_stage1_after_input_stage ;
  assign uut_ff_input_fifo$CLR = 1'b0 ;

  // submodule uut_ff_stage2_fifo
  assign uut_ff_stage2_fifo$D_IN =
	     { uut_ff_input_fifo$D_OUT[49],
	       uut_ff_input_fifo$D_OUT[4],
	       x__h11704,
	       x__h11748,
	       uut_ff_input_fifo$D_OUT[48:17],
	       uut_ff_input_fifo$D_OUT[13:9],
	       uut_ff_input_fifo$D_OUT[5],
	       uut_ff_input_fifo$D_OUT[3:2],
	       uut_ff_input_fifo$D_OUT[8:6],
	       uut_ff_input_fifo$D_OUT[16],
	       uut_ff_input_fifo$D_OUT[14],
	       uut_ff_input_fifo$D_OUT[15],
	       x__h11824,
	       x__h11830,
	       uut_ff_input_fifo$D_OUT[1:0] } ;
  assign uut_ff_stage2_fifo$ENQ =
	     CAN_FIRE_RL_uut_rl_stage1_after_input_stage ;
  assign uut_ff_stage2_fifo$DEQ = CAN_FIRE_RL_uut_rl_stage_3 ;
  assign uut_ff_stage2_fifo$CLR = 1'b0 ;

  // submodule uut_ff_stage4_fifo
  assign uut_ff_stage4_fifo$D_IN =
	     { x__h33435,
	       x__h33293,
	       _theResult_____1__h33251,
	       lv_minuend__h11982,
	       mantissa2__h11992,
	       mantissa3__h11993,
	       uut_ff_stage2_fifo$D_OUT[9:7],
	       x__h33323,
	       x__h33443,
	       x__h33484,
	       uut_ff_stage2_fifo$D_OUT[3:2],
	       x__h33514,
	       x__h33558,
	       uut_ff_stage2_fifo$D_OUT[5] } ;
  assign uut_ff_stage4_fifo$ENQ = CAN_FIRE_RL_uut_rl_stage_3 ;
  assign uut_ff_stage4_fifo$DEQ = CAN_FIRE_RL_uut_rl_stage4 ;
  assign uut_ff_stage4_fifo$CLR = 1'b0 ;

  // submodule uut_ff_stage5_fifo
  assign uut_ff_stage5_fifo$D_IN =
	     { uut_ff_stage4_fifo$D_OUT[168:159],
	       _theResult____h33697,
	       uut_ff_stage4_fifo$D_OUT[170],
	       uut_ff_stage4_fifo$D_OUT[12:10],
	       x__h33797,
	       uut_ff_stage4_fifo$D_OUT[9:0],
	       x__h33840 } ;
  assign uut_ff_stage5_fifo$ENQ = CAN_FIRE_RL_uut_rl_stage4 ;
  assign uut_ff_stage5_fifo$DEQ = RDY_get_result ;
  assign uut_ff_stage5_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d836 =
	     (_theResult_____5__h45005[24] ||
	      IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[72:71] ==
	      2'b0 &&
	      _theResult_____5__h45005[23]) ?
	       resultant_exponent___1__h45289 :
	       resultant_exponent__h44450 ;
  assign IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d863 =
	     _theResult_____5__h45005[24] ?
	       lv_rounded_mantissa__h45290 :
	       _theResult_____5__h45005 ;
  assign IF_IF_uut_ff_stage2_fifo_first__06_BIT_5_10_TH_ETC___d342 =
	     mantissa_to_shift__h11985 >> exponent_difference__h11986 ;
  assign IF_IF_uut_ff_stage5_fifo_first__47_BIT_95_48_T_ETC___d881 =
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 ?
	       (!resultant_exponent__h44450[9] ||
		uut_ff_stage5_fifo$D_OUT[7]) &&
	       !uut_ff_stage5_fifo$D_OUT[10] :
	       !uut_ff_stage5_fifo$D_OUT[10] ;
  assign IF_NOT_IF_uut_ff_stage5_fifo_first__47_BIT_95__ETC___d866 =
	     (!IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 ||
	      uut_ff_stage5_fifo$D_OUT[11] ||
	      IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d836[7:0] ==
	      8'd255) ?
	       ((uut_ff_stage5_fifo$D_OUT[21:19] == 3'b001 ||
		 uut_ff_stage5_fifo$D_OUT[21:19] == 3'b010 &&
		 !uut_ff_stage5_fifo$D_OUT[22] ||
		 uut_ff_stage5_fifo$D_OUT[21:19] == 3'b011 &&
		 uut_ff_stage5_fifo$D_OUT[22]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d836[7:0],
		 IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d863[22:0] } ;
  assign IF_uut_ff_input_fifo_first__4_BIT_107_0_THEN_0_ETC___d42 =
	     lv_product_mantissa__h8060 >>
	     _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32 ;
  assign IF_uut_ff_stage2_fifo_first__06_BITS_9_TO_7_11_ETC___d548 =
	     (uut_ff_stage2_fifo$D_OUT[9:7] == 3'b010 &&
	      sign2__h11948 | op_xor_sign3__h11961 ||
	      uut_ff_stage2_fifo$D_OUT[9:7] != 3'b010 &&
	      sign2__h11948 & op_xor_sign3__h11961) ?
	       2'b11 :
	       (sign2__h11948 ? lv_result_is_zero___1__h33498 : 2'b01) ;
  assign IF_uut_ff_stage2_fifo_first__06_BIT_5_10_THEN__ETC___d318 =
	     exponent2__h11972 <= exponent3__h11963 ;
  assign IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d766 =
	     resultant_exponent__h44450 - 10'd127 ;
  assign IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 =
	     (IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d766 ^
	      10'h200) <=
	     10'd639 ;
  assign IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785 =
	     uut_ff_stage5_fifo$D_OUT[95] ?
	       resultant_mantissa___1__h44471 :
	       y_avValue_snd_fst__h44694 ;
  assign INV_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT__ETC___d253 =
	     shift_neg__h8067 < { 4'd0, x__h11718 } ;
  assign _0_CONCAT_IF_IF_IF_uut_ff_stage2_fifo_first__06_ETC___d496 =
	     ({ 3'd0, x__h28225 } < exponent_difference__h11986 ||
	      IF_IF_uut_ff_stage2_fifo_first__06_BIT_5_10_TH_ETC___d342[0]) &&
	     mantissa_to_shift__h11985 != 73'd0 ;
  assign _0_CONCAT_INV_start_flags_BIT_14_36_OR_start_fl_ETC___d952 =
	     { 24'd0, x__h46257 } * { 24'd0, x__h46274 } ;
  assign _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d754 =
	     { 3'd0, uut_ff_stage5_fifo$D_OUT[6:0] } - 10'd1 ;
  assign _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757 =
	     _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d754 <=
	     resultant_exponent_sub__h44179 ;
  assign _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32 =
	     10'd1 - lv_product_exponent__h8058 ;
  assign _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d33 =
	     (_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32 ^
	      10'h200) <=
	     10'd512 ;
  assign _theResult_____1__h33251 = mantissa2__h11992 > mantissa3__h11993 ;
  assign _theResult_____1_fst__h11712 =
	     (msb_zeros__h8062 == 6'b000001) ?
	       lv_product_exponent__h8058 :
	       _theResult_____1_fst__h11715 ;
  assign _theResult_____1_fst__h11715 =
	     INV_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT__ETC___d253 ?
	       lv_product_exponent_sub_shift__h8069 :
	       lv_product_exponent_sub_zerosMSB__h8071 ;
  assign _theResult_____1_fst__h45084 =
	     !uut_ff_stage5_fifo$D_OUT[16] &&
	     uut_ff_stage5_fifo_first__47_BIT_14_21_OR_uut__ETC___d887 &&
	     _theResult_____3_fst__h45167 ;
  assign _theResult_____1_snd__h11713 =
	     (msb_zeros__h8062 == 6'b000001) ?
	       lv_product_mantissa__h8060 :
	       _theResult_____1_snd__h11716 ;
  assign _theResult_____1_snd__h11716 =
	     INV_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT__ETC___d253 ?
	       lv_product_mantissa_shiftL_expo__h8068 :
	       lv_product_mantissa_shiftL_zerosMSB__h8070 ;
  assign _theResult_____3_fst__h45167 =
	     !uut_ff_stage5_fifo$D_OUT[14] && _theResult_____6__h44654 ;
  assign _theResult_____3_fst__h45345 =
	     !IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 ||
	     uut_ff_stage5_fifo$D_OUT[11] ||
	     IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d836[7:0] ==
	     8'd255 ;
  assign _theResult_____3_snd_fst__h45169 =
	     !uut_ff_stage5_fifo$D_OUT[14] &&
	     ((uut_ff_stage5_fifo$D_OUT[12] || uut_ff_stage5_fifo$D_OUT[17]) ?
		!IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 :
		_theResult_____3_fst__h45345) ;
  assign _theResult_____3_snd_fst__h45363 =
	     !IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 ||
	     uut_ff_stage5_fifo$D_OUT[11] ||
	     IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d836[7:0] ==
	     8'd255 ||
	     lv_inexact__h44652 ;
  assign _theResult_____3_snd_snd__h45360 =
	     uut_ff_stage5_fifo$D_OUT[12] ?
	       lv_final_output__h45422 :
	       _theResult_____3_snd_snd__h45362 ;
  assign _theResult_____3_snd_snd__h45362 =
	     uut_ff_stage5_fifo$D_OUT[17] ?
	       lv_final_output__h45443 :
	       _theResult_____3_snd_snd__h45364 ;
  assign _theResult_____3_snd_snd__h45364 =
	     { uut_ff_stage5_fifo$D_OUT[22],
	       IF_NOT_IF_uut_ff_stage5_fifo_first__47_BIT_95__ETC___d866 } ;
  assign _theResult_____3_snd_snd_fst__h45357 =
	     !uut_ff_stage5_fifo$D_OUT[14] &&
	     ((uut_ff_stage5_fifo$D_OUT[12] || uut_ff_stage5_fifo$D_OUT[17]) ?
		lv_inexact__h44652 :
		_theResult_____3_snd_fst__h45363) ;
  assign _theResult_____3_snd_snd_snd__h45358 =
	     uut_ff_stage5_fifo$D_OUT[14] ?
	       lv_final_output__h45171 :
	       _theResult_____3_snd_snd__h45360 ;
  assign _theResult_____4_snd_fst__h12152 =
	     IF_uut_ff_stage2_fifo_first__06_BIT_5_10_THEN__ETC___d318 ?
	       exponent2__h11972 :
	       exponent3__h11963 ;
  assign _theResult_____5__h45005 =
	     _theResult_____7__h44653 ?
	       lv_rounded_mantissa___1__h45025 :
	       IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[72:48] ;
  assign _theResult_____6__h44654 =
	     !uut_ff_stage5_fifo$D_OUT[95] && !uut_ff_stage5_fifo$D_OUT[94] &&
	     !_0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757 &&
	     lv_inexact__h44652 ||
	     (IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 ?
		v__h44546 :
		uut_ff_stage5_fifo$D_OUT[10]) ;
  assign _theResult_____6_fst__h33397 =
	     (!uut_ff_stage2_fifo$D_OUT[4] ||
	      !uut_ff_stage2_fifo$D_OUT[14]) &&
	     uut_ff_stage2_fifo$D_OUT[1] ;
  assign _theResult_____6_snd_snd__h33400 =
	     (uut_ff_stage2_fifo$D_OUT[4] && uut_ff_stage2_fifo$D_OUT[14]) ?
	       lv_result_is_infinity___1__h33401 :
	       ((uut_ff_stage2_fifo$D_OUT[4] ||
		 uut_ff_stage2_fifo$D_OUT[14]) ?
		  lv_result_is_infinity___1__h33463 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h33447 =
	     (uut_ff_stage2_fifo$D_OUT[16] && uut_ff_stage2_fifo$D_OUT[5]) ?
	       (uut_ff_stage2_fifo$D_OUT[11] ?
		  lv_result_is_zero___1__h33502 :
		  IF_uut_ff_stage2_fifo_first__06_BITS_9_TO_7_11_ETC___d548) :
	       2'd0 ;
  assign _theResult____h11962 =
	     (!uut_ff_stage2_fifo$D_OUT[14] &&
	      !uut_ff_stage2_fifo_first__06_BIT_15_25_OR_uut__ETC___d327 &&
	      !uut_ff_stage2_fifo$D_OUT[16]) ?
	       mantissa3___1__h21143 :
	       73'd0 ;
  assign _theResult____h33697 =
	     uut_ff_stage4_fifo$D_OUT[171] ?
	       sub_mantissa__h33696 :
	       add_mantissa__h33693 ;
  assign _theResult___fst__h45921 =
	     (_start_flags[11] || _start_flags[6]) ?
	       _theResult___fst__h45929 :
	       start_flags_BIT_12_00_AND_INV_start_flags_BIT__ETC___d961 ;
  assign _theResult___fst__h45929 =
	     (_start_flags[13] || _start_flags[8]) &&
	     start_flags_BIT_12_00_AND_INV_start_flags_BIT__ETC___d961 ;
  assign add_mantissa__h33693 =
	     uut_ff_stage4_fifo$D_OUT[158:86] +
	     uut_ff_stage4_fifo$D_OUT[85:13] ;
  assign ex_overflow__h45052 =
	     !uut_ff_stage5_fifo$D_OUT[16] &&
	     _theResult_____3_snd_fst__h45169 ;
  assign exp1_temp__h46051 = { 2'b0, _start__operand1[30:23] } ;
  assign exp2_temp__h46052 = { 2'b0, _start__operand2[30:23] } ;
  assign expo3_zero__h11960 = uut_ff_stage2_fifo$D_OUT[48:41] != 8'd0 ;
  assign exponent2__h11972 =
	     uut_ff_stage2_fifo$D_OUT[5] ?
	       10'd0 :
	       uut_ff_stage2_fifo$D_OUT[108:99] ;
  assign exponent3__h11951 = { 2'b0, uut_ff_stage2_fifo$D_OUT[48:41] } ;
  assign exponent3__h11963 =
	     exponent3__h11951 + { 9'd0, uut_ff_stage2_fifo$D_OUT[17] } ;
  assign exponent_difference__h11986 =
	     lv_minuend__h11982 - _theResult_____4_snd_fst__h12152 ;
  assign fflags__h45054 =
	     { !uut_ff_stage5_fifo$D_OUT[9] && !uut_ff_stage5_fifo$D_OUT[8] &&
	       uut_ff_stage5_fifo$D_OUT[16],
	       1'b0,
	       ex_overflow__h45052,
	       _theResult_____1_fst__h45084,
	       lv_inexact__h45053 } ;
  assign lsb_zeros__h8064 =
	     lv_product_mantissa__h8060[0] ?
	       6'd0 :
	       (lv_product_mantissa__h8060[1] ?
		  6'd1 :
		  (lv_product_mantissa__h8060[2] ?
		     6'd2 :
		     (lv_product_mantissa__h8060[3] ?
			6'd3 :
			(lv_product_mantissa__h8060[4] ?
			   6'd4 :
			   (lv_product_mantissa__h8060[5] ?
			      6'd5 :
			      (lv_product_mantissa__h8060[6] ?
				 6'd6 :
				 (lv_product_mantissa__h8060[7] ?
				    6'd7 :
				    (lv_product_mantissa__h8060[8] ?
				       6'd8 :
				       (lv_product_mantissa__h8060[9] ?
					  6'd9 :
					  (lv_product_mantissa__h8060[10] ?
					     6'd10 :
					     (lv_product_mantissa__h8060[11] ?
						6'd11 :
						(lv_product_mantissa__h8060[12] ?
						   6'd12 :
						   (lv_product_mantissa__h8060[13] ?
						      6'd13 :
						      (lv_product_mantissa__h8060[14] ?
							 6'd14 :
							 (lv_product_mantissa__h8060[15] ?
							    6'd15 :
							    (lv_product_mantissa__h8060[16] ?
							       6'd16 :
							       (lv_product_mantissa__h8060[17] ?
								  6'd17 :
								  (lv_product_mantissa__h8060[18] ?
								     6'd18 :
								     (lv_product_mantissa__h8060[19] ?
									6'd19 :
									(lv_product_mantissa__h8060[20] ?
									   6'd20 :
									   (lv_product_mantissa__h8060[21] ?
									      6'd21 :
									      (lv_product_mantissa__h8060[22] ?
										 6'd22 :
										 (lv_product_mantissa__h8060[23] ?
										    6'd23 :
										    (lv_product_mantissa__h8060[24] ?
										       6'd24 :
										       (lv_product_mantissa__h8060[25] ?
											  6'd25 :
											  (lv_product_mantissa__h8060[26] ?
											     6'd26 :
											     (lv_product_mantissa__h8060[27] ?
												6'd27 :
												(lv_product_mantissa__h8060[28] ?
												   6'd28 :
												   (lv_product_mantissa__h8060[29] ?
												      6'd29 :
												      (lv_product_mantissa__h8060[30] ?
													 6'd30 :
													 (lv_product_mantissa__h8060[31] ?
													    6'd31 :
													    (lv_product_mantissa__h8060[32] ?
													       6'd32 :
													       (lv_product_mantissa__h8060[33] ?
														  6'd33 :
														  (lv_product_mantissa__h8060[34] ?
														     6'd34 :
														     (lv_product_mantissa__h8060[35] ?
															6'd35 :
															(lv_product_mantissa__h8060[36] ?
															   6'd36 :
															   (lv_product_mantissa__h8060[37] ?
															      6'd37 :
															      (lv_product_mantissa__h8060[38] ?
																 6'd38 :
																 (lv_product_mantissa__h8060[39] ?
																    6'd39 :
																    (lv_product_mantissa__h8060[40] ?
																       6'd40 :
																       (lv_product_mantissa__h8060[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h8060[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h8060[43] ?
																		6'd43 :
																		(lv_product_mantissa__h8060[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h8060[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h8060[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h8060[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h8060[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_final_output__h45047 =
	     uut_ff_stage5_fifo$D_OUT[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_snd_snd__h45358 ;
  assign lv_final_output__h45171 =
	     { uut_ff_stage5_fifo$D_OUT[15], 31'h7F800000 } ;
  assign lv_final_output__h45422 = { uut_ff_stage5_fifo$D_OUT[13], 31'd0 } ;
  assign lv_final_output__h45443 = { uut_ff_stage5_fifo$D_OUT[18], 31'd0 } ;
  assign lv_inexact__h44652 = x__h44938 | lv_sticky__h44650 ;
  assign lv_inexact__h45053 =
	     !uut_ff_stage5_fifo$D_OUT[16] &&
	     _theResult_____3_snd_snd_fst__h45357 ;
  assign lv_minuend__h11982 =
	     IF_uut_ff_stage2_fifo_first__06_BIT_5_10_THEN__ETC___d318 ?
	       exponent3__h11963 :
	       exponent2__h11972 ;
  assign lv_op1_subnormal__h45686 = _start_flags[14] | _start_flags[13] ;
  assign lv_op2_subnormal__h45687 = _start_flags[9] | _start_flags[8] ;
  assign lv_product_exponent___1__h8094 =
	     uut_ff_input_fifo$D_OUT[59:50] + 10'd1 ;
  assign lv_product_exponent__h8058 =
	     uut_ff_input_fifo$D_OUT[107] ?
	       lv_product_exponent___1__h8094 :
	       uut_ff_input_fifo$D_OUT[59:50] ;
  assign lv_product_exponent_inc_shift__h8066 =
	     lv_product_exponent__h8058 +
	     _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32 ;
  assign lv_product_exponent_sub_shift__h8069 =
	     lv_product_exponent__h8058 - shift_neg__h8067 ;
  assign lv_product_exponent_sub_zerosMSB__h8071 =
	     lv_product_exponent__h8058 - y__h11743 ;
  assign lv_product_mantissa___1__h8093 =
	     { 1'd0, uut_ff_input_fifo$D_OUT[107:60] } ;
  assign lv_product_mantissa___1__h8112 =
	     { IF_uut_ff_input_fifo_first__4_BIT_107_0_THEN_0_ETC___d42[48:1],
	       lv_sticky___1__h8113 } ;
  assign lv_product_mantissa__h705 =
	     { uut_ff_input_fifo$D_OUT[107:60], 1'b0 } ;
  assign lv_product_mantissa__h8060 =
	     uut_ff_input_fifo$D_OUT[107] ?
	       lv_product_mantissa___1__h8093 :
	       lv_product_mantissa__h705 ;
  assign lv_product_mantissa_shiftL_expo__h8068 =
	     lv_product_mantissa__h8060 << shift_neg__h8067 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h8070 =
	     lv_product_mantissa__h8060 << x__h11718 ;
  assign lv_result_is_infinity___1__h33401 = { sign2__h11948, ~x__h33435 } ;
  assign lv_result_is_infinity___1__h33463 = { x__h33475 | y__h33476, 1'd1 } ;
  assign lv_result_is_zero___1__h33498 = { op_xor_sign3__h11961, 1'b1 } ;
  assign lv_result_is_zero___1__h33502 = { sign2__h11948, 1'd1 } ;
  assign lv_round_up___1__h44889 =
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[47] &
	     y__h44901 ;
  assign lv_round_up___1__h44926 =
	     lv_inexact__h44652 & uut_ff_stage5_fifo$D_OUT[22] ;
  assign lv_rounded_mantissa___1__h45025 =
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h45290 =
	     { 1'd0, _theResult_____5__h45005[24:1] } ;
  assign lv_sticky___1__h8113 =
	     IF_uut_ff_input_fifo_first__4_BIT_107_0_THEN_0_ETC___d42[0] |
	     ((_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h8064 } ^ 10'h200) ||
	      lv_product_mantissa__h8060[0]) ;
  assign lv_sticky__h44650 =
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[45:0] !=
	     46'd0 ;
  assign lv_summed_exponent__h46053 = x__h46089 + y__h46090 ;
  assign mantissa2__h11949 = { uut_ff_stage2_fifo$D_OUT[98:50], 24'd0 } ;
  assign mantissa2__h11971 =
	     uut_ff_stage2_fifo$D_OUT[5] ? 73'd0 : mantissa2__h11949 ;
  assign mantissa2__h11992 =
	     IF_uut_ff_stage2_fifo_first__06_BIT_5_10_THEN__ETC___d318 ?
	       mantissa_to_shift___1__h11990 :
	       mantissa2__h11971 ;
  assign mantissa3___1__h21143 =
	     { 1'd0,
	       expo3_zero__h11960,
	       uut_ff_stage2_fifo$D_OUT[40:18],
	       48'd0 } ;
  assign mantissa3__h11993 =
	     IF_uut_ff_stage2_fifo_first__06_BIT_5_10_THEN__ETC___d318 ?
	       _theResult____h11962 :
	       mantissa_to_shift___1__h11990 ;
  assign mantissa_to_shift___1__h11990 =
	     { IF_IF_uut_ff_stage2_fifo_first__06_BIT_5_10_TH_ETC___d342[72:1],
	       _0_CONCAT_IF_IF_IF_uut_ff_stage2_fifo_first__06_ETC___d496 } ;
  assign mantissa_to_shift__h11985 =
	     IF_uut_ff_stage2_fifo_first__06_BIT_5_10_THEN__ETC___d318 ?
	       mantissa2__h11971 :
	       _theResult____h11962 ;
  assign msb_zeros___1__h8096 = msb_zeros__h724 + 6'd1 ;
  assign msb_zeros__h724 =
	     uut_ff_input_fifo$D_OUT[107] ?
	       6'd0 :
	       (uut_ff_input_fifo$D_OUT[106] ?
		  6'd1 :
		  (uut_ff_input_fifo$D_OUT[105] ?
		     6'd2 :
		     (uut_ff_input_fifo$D_OUT[104] ?
			6'd3 :
			(uut_ff_input_fifo$D_OUT[103] ?
			   6'd4 :
			   (uut_ff_input_fifo$D_OUT[102] ?
			      6'd5 :
			      (uut_ff_input_fifo$D_OUT[101] ?
				 6'd6 :
				 (uut_ff_input_fifo$D_OUT[100] ?
				    6'd7 :
				    (uut_ff_input_fifo$D_OUT[99] ?
				       6'd8 :
				       (uut_ff_input_fifo$D_OUT[98] ?
					  6'd9 :
					  (uut_ff_input_fifo$D_OUT[97] ?
					     6'd10 :
					     (uut_ff_input_fifo$D_OUT[96] ?
						6'd11 :
						(uut_ff_input_fifo$D_OUT[95] ?
						   6'd12 :
						   (uut_ff_input_fifo$D_OUT[94] ?
						      6'd13 :
						      (uut_ff_input_fifo$D_OUT[93] ?
							 6'd14 :
							 (uut_ff_input_fifo$D_OUT[92] ?
							    6'd15 :
							    (uut_ff_input_fifo$D_OUT[91] ?
							       6'd16 :
							       (uut_ff_input_fifo$D_OUT[90] ?
								  6'd17 :
								  (uut_ff_input_fifo$D_OUT[89] ?
								     6'd18 :
								     (uut_ff_input_fifo$D_OUT[88] ?
									6'd19 :
									(uut_ff_input_fifo$D_OUT[87] ?
									   6'd20 :
									   (uut_ff_input_fifo$D_OUT[86] ?
									      6'd21 :
									      (uut_ff_input_fifo$D_OUT[85] ?
										 6'd22 :
										 (uut_ff_input_fifo$D_OUT[84] ?
										    6'd23 :
										    (uut_ff_input_fifo$D_OUT[83] ?
										       6'd24 :
										       (uut_ff_input_fifo$D_OUT[82] ?
											  6'd25 :
											  (uut_ff_input_fifo$D_OUT[81] ?
											     6'd26 :
											     (uut_ff_input_fifo$D_OUT[80] ?
												6'd27 :
												(uut_ff_input_fifo$D_OUT[79] ?
												   6'd28 :
												   (uut_ff_input_fifo$D_OUT[78] ?
												      6'd29 :
												      (uut_ff_input_fifo$D_OUT[77] ?
													 6'd30 :
													 (uut_ff_input_fifo$D_OUT[76] ?
													    6'd31 :
													    (uut_ff_input_fifo$D_OUT[75] ?
													       6'd32 :
													       (uut_ff_input_fifo$D_OUT[74] ?
														  6'd33 :
														  (uut_ff_input_fifo$D_OUT[73] ?
														     6'd34 :
														     (uut_ff_input_fifo$D_OUT[72] ?
															6'd35 :
															(uut_ff_input_fifo$D_OUT[71] ?
															   6'd36 :
															   (uut_ff_input_fifo$D_OUT[70] ?
															      6'd37 :
															      (uut_ff_input_fifo$D_OUT[69] ?
																 6'd38 :
																 (uut_ff_input_fifo$D_OUT[68] ?
																    6'd39 :
																    (uut_ff_input_fifo$D_OUT[67] ?
																       6'd40 :
																       (uut_ff_input_fifo$D_OUT[66] ?
																	  6'd41 :
																	  (uut_ff_input_fifo$D_OUT[65] ?
																	     6'd42 :
																	     (uut_ff_input_fifo$D_OUT[64] ?
																		6'd43 :
																		(uut_ff_input_fifo$D_OUT[63] ?
																		   6'd44 :
																		   (uut_ff_input_fifo$D_OUT[62] ?
																		      6'd45 :
																		      (uut_ff_input_fifo$D_OUT[61] ?
																			 6'd46 :
																			 (uut_ff_input_fifo$D_OUT[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h8062 =
	     uut_ff_input_fifo$D_OUT[107] ?
	       msb_zeros___1__h8096 :
	       msb_zeros__h724 ;
  assign op_xor_sign3__h11961 = uut_ff_stage2_fifo$D_OUT[12] ^ sign3__h11950 ;
  assign resultant_exponent___1__h45289 = resultant_exponent__h44450 + 10'd1 ;
  assign resultant_exponent__h44450 =
	     uut_ff_stage5_fifo$D_OUT[95] ?
	       resultant_exponent_inc__h44181 :
	       y_avValue_fst__h44442 ;
  assign resultant_exponent_inc__h44181 =
	     uut_ff_stage5_fifo$D_OUT[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h44179 =
	     uut_ff_stage5_fifo$D_OUT[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h44184 =
	     uut_ff_stage5_fifo$D_OUT[105:96] -
	     _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d754 ;
  assign resultant_mantissa___1__h44471 =
	     { 1'd0,
	       uut_ff_stage5_fifo$D_OUT[95:25],
	       uut_ff_stage5_fifo$D_OUT[23] | uut_ff_stage5_fifo$D_OUT[24] } ;
  assign resultant_mantissa_norm_zerosMSB__h44183 =
	     uut_ff_stage5_fifo$D_OUT[95:23] << x__h44797 ;
  assign shift_neg__h8067 =
	     ~_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32 +
	     10'd1 ;
  assign sign2__h11948 =
	     uut_ff_stage2_fifo$D_OUT[110] ^ uut_ff_stage2_fifo$D_OUT[109] ;
  assign sign3__h11950 =
	     uut_ff_stage2_fifo$D_OUT[49] ^ uut_ff_stage2_fifo$D_OUT[109] ;
  assign start_flags_BIT_10_99_OR_start_flags_BIT_12_00___d901 =
	     _start_flags[10] | _start_flags[12] ;
  assign start_flags_BIT_12_00_AND_INV_start_flags_BIT__ETC___d961 =
	     x__h46334 | y__h46335 ;
  assign start_flags_BIT_5_02_OR_start_flags_BIT_7_03___d904 =
	     _start_flags[5] | _start_flags[7] ;
  assign sub_mantissa1__h33694 =
	     uut_ff_stage4_fifo$D_OUT[169] ?
	       uut_ff_stage4_fifo$D_OUT[158:86] :
	       uut_ff_stage4_fifo$D_OUT[85:13] ;
  assign sub_mantissa2__h33695 =
	     uut_ff_stage4_fifo$D_OUT[169] ?
	       uut_ff_stage4_fifo$D_OUT[85:13] :
	       uut_ff_stage4_fifo$D_OUT[158:86] ;
  assign sub_mantissa__h33696 =
	     sub_mantissa1__h33694 - sub_mantissa2__h33695 ;
  assign uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d16 =
	     uut_ff_input_fifo$D_OUT[59:50] - 10'd127 ;
  assign uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 =
	     (uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d16 ^
	      10'h200) <=
	     10'd639 ;
  assign uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d28 =
	     (uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d16 ^
	      10'h200) <
	     10'd361 ;
  assign uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d35 =
	     uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 &&
	     (!uut_ff_input_fifo$D_OUT[107] ||
	      uut_ff_input_fifo$D_OUT[59:50] != 10'd254) &&
	     !_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d33 ;
  assign uut_ff_stage2_fifo_first__06_BIT_15_25_OR_uut__ETC___d327 =
	     uut_ff_stage2_fifo$D_OUT[15] | uut_ff_stage2_fifo$D_OUT[13] ;
  assign uut_ff_stage5_fifo_first__47_BIT_14_21_OR_uut__ETC___d887 =
	     uut_ff_stage5_fifo$D_OUT[14] ||
	     (uut_ff_stage5_fifo$D_OUT[95] || uut_ff_stage5_fifo$D_OUT[94] ||
	      _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757 ||
	      !lv_inexact__h44652) &&
	     IF_IF_uut_ff_stage5_fifo_first__47_BIT_95_48_T_ETC___d881 ||
	     !IF_IF_IF_uut_ff_stage5_fifo_first__47_BITS_21__ETC___d863[23] ||
	     uut_ff_stage5_fifo$D_OUT[21:19] == 3'b011 ;
  assign v__h44546 =
	     resultant_exponent__h44450[9] && !uut_ff_stage5_fifo$D_OUT[7] ||
	     uut_ff_stage5_fifo$D_OUT[10] ;
  assign x__h11704 =
	     (!uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 ||
	      uut_ff_input_fifo$D_OUT[107] &&
	      uut_ff_input_fifo$D_OUT[59:50] == 10'd254) ?
	       uut_ff_input_fifo$D_OUT[59:50] :
	       y_avValue_fst__h11667 ;
  assign x__h11718 = msb_zeros__h8062 - 6'd1 ;
  assign x__h11744 = { 4'd0, msb_zeros__h8062 } ;
  assign x__h11748 =
	     (!uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 ||
	      uut_ff_input_fifo$D_OUT[107] &&
	      uut_ff_input_fifo$D_OUT[59:50] == 10'd254) ?
	       lv_product_mantissa__h705 :
	       y_avValue_snd_fst__h11750 ;
  assign x__h11824 =
	     (!uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 ||
	      uut_ff_input_fifo$D_OUT[107] &&
	      uut_ff_input_fifo$D_OUT[59:50] == 10'd254) &&
	     (!uut_ff_input_fifo$D_OUT[2] ||
	      !(x__h7856 ^ uut_ff_input_fifo$D_OUT[5])) ;
  assign x__h11830 =
	     uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 &&
	     (!uut_ff_input_fifo$D_OUT[107] ||
	      uut_ff_input_fifo$D_OUT[59:50] != 10'd254) &&
	     uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d28 &&
	     (!uut_ff_input_fifo$D_OUT[2] || uut_ff_input_fifo$D_OUT[12] ||
	      uut_ff_input_fifo$D_OUT[13]) &&
	     !uut_ff_input_fifo$D_OUT[14] ;
  assign x__h28225 =
	     mantissa_to_shift__h11985[0] ?
	       7'd0 :
	       (mantissa_to_shift__h11985[1] ?
		  7'd1 :
		  (mantissa_to_shift__h11985[2] ?
		     7'd2 :
		     (mantissa_to_shift__h11985[3] ?
			7'd3 :
			(mantissa_to_shift__h11985[4] ?
			   7'd4 :
			   (mantissa_to_shift__h11985[5] ?
			      7'd5 :
			      (mantissa_to_shift__h11985[6] ?
				 7'd6 :
				 (mantissa_to_shift__h11985[7] ?
				    7'd7 :
				    (mantissa_to_shift__h11985[8] ?
				       7'd8 :
				       (mantissa_to_shift__h11985[9] ?
					  7'd9 :
					  (mantissa_to_shift__h11985[10] ?
					     7'd10 :
					     (mantissa_to_shift__h11985[11] ?
						7'd11 :
						(mantissa_to_shift__h11985[12] ?
						   7'd12 :
						   (mantissa_to_shift__h11985[13] ?
						      7'd13 :
						      (mantissa_to_shift__h11985[14] ?
							 7'd14 :
							 (mantissa_to_shift__h11985[15] ?
							    7'd15 :
							    (mantissa_to_shift__h11985[16] ?
							       7'd16 :
							       (mantissa_to_shift__h11985[17] ?
								  7'd17 :
								  (mantissa_to_shift__h11985[18] ?
								     7'd18 :
								     (mantissa_to_shift__h11985[19] ?
									7'd19 :
									(mantissa_to_shift__h11985[20] ?
									   7'd20 :
									   (mantissa_to_shift__h11985[21] ?
									      7'd21 :
									      (mantissa_to_shift__h11985[22] ?
										 7'd22 :
										 (mantissa_to_shift__h11985[23] ?
										    7'd23 :
										    (mantissa_to_shift__h11985[24] ?
										       7'd24 :
										       (mantissa_to_shift__h11985[25] ?
											  7'd25 :
											  (mantissa_to_shift__h11985[26] ?
											     7'd26 :
											     (mantissa_to_shift__h11985[27] ?
												7'd27 :
												(mantissa_to_shift__h11985[28] ?
												   7'd28 :
												   (mantissa_to_shift__h11985[29] ?
												      7'd29 :
												      (mantissa_to_shift__h11985[30] ?
													 7'd30 :
													 (mantissa_to_shift__h11985[31] ?
													    7'd31 :
													    (mantissa_to_shift__h11985[32] ?
													       7'd32 :
													       (mantissa_to_shift__h11985[33] ?
														  7'd33 :
														  (mantissa_to_shift__h11985[34] ?
														     7'd34 :
														     (mantissa_to_shift__h11985[35] ?
															7'd35 :
															(mantissa_to_shift__h11985[36] ?
															   7'd36 :
															   (mantissa_to_shift__h11985[37] ?
															      7'd37 :
															      (mantissa_to_shift__h11985[38] ?
																 7'd38 :
																 (mantissa_to_shift__h11985[39] ?
																    7'd39 :
																    (mantissa_to_shift__h11985[40] ?
																       7'd40 :
																       (mantissa_to_shift__h11985[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h11985[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h11985[43] ?
																		7'd43 :
																		(mantissa_to_shift__h11985[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h11985[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h11985[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h11985[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h11985[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h11985[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h11985[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h11985[51] ?
																					7'd51 :
																					(mantissa_to_shift__h11985[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h11985[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h11985[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h11985[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h11985[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h11985[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h11985[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h11985[59] ?
																								7'd59 :
																								(mantissa_to_shift__h11985[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h11985[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h11985[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h11985[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h11985[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h11985[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h11985[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h11985[67] ?
																											7'd67 :
																											(mantissa_to_shift__h11985[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h11985[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h11985[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h11985[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h11985[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h33293 = x__h33305 | y__h33306 ;
  assign x__h33305 = _theResult_____1__h33251 & sign2__h11948 ;
  assign x__h33310 = ~_theResult_____1__h33251 ;
  assign x__h33323 =
	     uut_ff_stage2_fifo_first__06_BIT_15_25_OR_uut__ETC___d327 ||
	     uut_ff_stage2_fifo$D_OUT[6] ||
	     (!uut_ff_stage2_fifo$D_OUT[16] ||
	      !uut_ff_stage2_fifo$D_OUT[5]) &&
	     uut_ff_stage2_fifo$D_OUT[4] &&
	     uut_ff_stage2_fifo$D_OUT[14] &&
	     x__h33435 ;
  assign x__h33435 = sign2__h11948 ^ op_xor_sign3__h11961 ;
  assign x__h33443 =
	     (uut_ff_stage2_fifo_first__06_BIT_15_25_OR_uut__ETC___d327 ||
	      uut_ff_stage2_fifo$D_OUT[6] ||
	      uut_ff_stage2_fifo$D_OUT[16] && uut_ff_stage2_fifo$D_OUT[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h33400 ;
  assign x__h33475 = x__h33477 & sign2__h11948 ;
  assign x__h33477 = uut_ff_stage2_fifo$D_OUT[4] & y__h33478 ;
  assign x__h33479 = x__h33480 & uut_ff_stage2_fifo$D_OUT[14] ;
  assign x__h33480 = ~uut_ff_stage2_fifo$D_OUT[4] ;
  assign x__h33484 =
	     (uut_ff_stage2_fifo_first__06_BIT_15_25_OR_uut__ETC___d327 ||
	      uut_ff_stage2_fifo$D_OUT[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h33447 ;
  assign x__h33514 = x__h33526 & y__h33527 ;
  assign x__h33526 =
	     (uut_ff_stage2_fifo_first__06_BIT_15_25_OR_uut__ETC___d327 ||
	      uut_ff_stage2_fifo$D_OUT[6] ||
	      uut_ff_stage2_fifo$D_OUT[16] && uut_ff_stage2_fifo$D_OUT[5]) ?
	       uut_ff_stage2_fifo$D_OUT[1] :
	       _theResult_____6_fst__h33397 ;
  assign x__h33558 =
	     (uut_ff_stage2_fifo$D_OUT[1] || !uut_ff_stage2_fifo$D_OUT[6]) &&
	     uut_ff_stage2_fifo$D_OUT[15] ;
  assign x__h33797 =
	     (_theResult____h33697 == 73'd0) ?
	       ((uut_ff_stage4_fifo$D_OUT[12:10] == 3'b010) ? 2'b11 : 2'b01) :
	       2'd0 ;
  assign x__h33840 =
	     _theResult____h33697[72] ?
	       7'd0 :
	       (_theResult____h33697[71] ?
		  7'd1 :
		  (_theResult____h33697[70] ?
		     7'd2 :
		     (_theResult____h33697[69] ?
			7'd3 :
			(_theResult____h33697[68] ?
			   7'd4 :
			   (_theResult____h33697[67] ?
			      7'd5 :
			      (_theResult____h33697[66] ?
				 7'd6 :
				 (_theResult____h33697[65] ?
				    7'd7 :
				    (_theResult____h33697[64] ?
				       7'd8 :
				       (_theResult____h33697[63] ?
					  7'd9 :
					  (_theResult____h33697[62] ?
					     7'd10 :
					     (_theResult____h33697[61] ?
						7'd11 :
						(_theResult____h33697[60] ?
						   7'd12 :
						   (_theResult____h33697[59] ?
						      7'd13 :
						      (_theResult____h33697[58] ?
							 7'd14 :
							 (_theResult____h33697[57] ?
							    7'd15 :
							    (_theResult____h33697[56] ?
							       7'd16 :
							       (_theResult____h33697[55] ?
								  7'd17 :
								  (_theResult____h33697[54] ?
								     7'd18 :
								     (_theResult____h33697[53] ?
									7'd19 :
									(_theResult____h33697[52] ?
									   7'd20 :
									   (_theResult____h33697[51] ?
									      7'd21 :
									      (_theResult____h33697[50] ?
										 7'd22 :
										 (_theResult____h33697[49] ?
										    7'd23 :
										    (_theResult____h33697[48] ?
										       7'd24 :
										       (_theResult____h33697[47] ?
											  7'd25 :
											  (_theResult____h33697[46] ?
											     7'd26 :
											     (_theResult____h33697[45] ?
												7'd27 :
												(_theResult____h33697[44] ?
												   7'd28 :
												   (_theResult____h33697[43] ?
												      7'd29 :
												      (_theResult____h33697[42] ?
													 7'd30 :
													 (_theResult____h33697[41] ?
													    7'd31 :
													    (_theResult____h33697[40] ?
													       7'd32 :
													       (_theResult____h33697[39] ?
														  7'd33 :
														  (_theResult____h33697[38] ?
														     7'd34 :
														     (_theResult____h33697[37] ?
															7'd35 :
															(_theResult____h33697[36] ?
															   7'd36 :
															   (_theResult____h33697[35] ?
															      7'd37 :
															      (_theResult____h33697[34] ?
																 7'd38 :
																 (_theResult____h33697[33] ?
																    7'd39 :
																    (_theResult____h33697[32] ?
																       7'd40 :
																       (_theResult____h33697[31] ?
																	  7'd41 :
																	  (_theResult____h33697[30] ?
																	     7'd42 :
																	     (_theResult____h33697[29] ?
																		7'd43 :
																		(_theResult____h33697[28] ?
																		   7'd44 :
																		   (_theResult____h33697[27] ?
																		      7'd45 :
																		      (_theResult____h33697[26] ?
																			 7'd46 :
																			 (_theResult____h33697[25] ?
																			    7'd47 :
																			    (_theResult____h33697[24] ?
																			       7'd48 :
																			       (_theResult____h33697[23] ?
																				  7'd49 :
																				  (_theResult____h33697[22] ?
																				     7'd50 :
																				     (_theResult____h33697[21] ?
																					7'd51 :
																					(_theResult____h33697[20] ?
																					   7'd52 :
																					   (_theResult____h33697[19] ?
																					      7'd53 :
																					      (_theResult____h33697[18] ?
																						 7'd54 :
																						 (_theResult____h33697[17] ?
																						    7'd55 :
																						    (_theResult____h33697[16] ?
																						       7'd56 :
																						       (_theResult____h33697[15] ?
																							  7'd57 :
																							  (_theResult____h33697[14] ?
																							     7'd58 :
																							     (_theResult____h33697[13] ?
																								7'd59 :
																								(_theResult____h33697[12] ?
																								   7'd60 :
																								   (_theResult____h33697[11] ?
																								      7'd61 :
																								      (_theResult____h33697[10] ?
																									 7'd62 :
																									 (_theResult____h33697[9] ?
																									    7'd63 :
																									    (_theResult____h33697[8] ?
																									       7'd64 :
																									       (_theResult____h33697[7] ?
																										  7'd65 :
																										  (_theResult____h33697[6] ?
																										     7'd66 :
																										     (_theResult____h33697[5] ?
																											7'd67 :
																											(_theResult____h33697[4] ?
																											   7'd68 :
																											   (_theResult____h33697[3] ?
																											      7'd69 :
																											      (_theResult____h33697[2] ?
																												 7'd70 :
																												 (_theResult____h33697[1] ?
																												    7'd71 :
																												    (_theResult____h33697[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h44797 = uut_ff_stage5_fifo$D_OUT[6:0] - 7'd1 ;
  assign x__h44902 =
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[48] |
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[46] ;
  assign x__h44938 =
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[47] |
	     IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[46] ;
  assign x__h46089 = x__h46091 + y__h46092 ;
  assign x__h46091 = x__h46093 - 10'd127 ;
  assign x__h46093 = exp1_temp__h46051 + exp2_temp__h46052 ;
  assign x__h46257 = { ~lv_op1_subnormal__h45686, _start__operand1[22:0] } ;
  assign x__h46274 = { ~lv_op2_subnormal__h45687, _start__operand2[22:0] } ;
  assign x__h46284 = _start__operand1[31] ^ _start__operand2[31] ;
  assign x__h46308 =
	     start_flags_BIT_10_99_OR_start_flags_BIT_12_00___d901 ||
	     start_flags_BIT_5_02_OR_start_flags_BIT_7_03___d904 ||
	     (_start_flags[11] || _start_flags[6]) &&
	     (_start_flags[13] || _start_flags[8]) ;
  assign x__h46309 =
	     !start_flags_BIT_10_99_OR_start_flags_BIT_12_00___d901 &&
	     !start_flags_BIT_5_02_OR_start_flags_BIT_7_03___d904 &&
	     (_start_flags[11] || _start_flags[6]) &&
	     !_start_flags[13] &&
	     !_start_flags[8] ;
  assign x__h46310 =
	     !start_flags_BIT_10_99_OR_start_flags_BIT_12_00___d901 &&
	     !start_flags_BIT_5_02_OR_start_flags_BIT_7_03___d904 &&
	     !_start_flags[11] &&
	     !_start_flags[6] &&
	     (_start_flags[13] || _start_flags[8]) ;
  assign x__h46321 =
	     (start_flags_BIT_10_99_OR_start_flags_BIT_12_00___d901 ||
	      start_flags_BIT_5_02_OR_start_flags_BIT_7_03___d904) ?
	       start_flags_BIT_12_00_AND_INV_start_flags_BIT__ETC___d961 :
	       _theResult___fst__h45921 ;
  assign x__h46334 = _start_flags[12] & y__h46337 ;
  assign x__h46420 = lv_op1_subnormal__h45686 | lv_op2_subnormal__h45687 ;
  assign x__h7856 =
	     uut_ff_input_fifo$D_OUT[49] ^ uut_ff_input_fifo$D_OUT[48] ;
  assign y__h11743 = x__h11744 - 10'd1 ;
  assign y__h33306 = x__h33310 & op_xor_sign3__h11961 ;
  assign y__h33476 = x__h33479 & op_xor_sign3__h11961 ;
  assign y__h33478 = ~uut_ff_stage2_fifo$D_OUT[14] ;
  assign y__h33527 = ~uut_ff_stage2_fifo$D_OUT[13] ;
  assign y__h44901 = x__h44902 | lv_sticky__h44650 ;
  assign y__h44954 = ~uut_ff_stage5_fifo$D_OUT[22] ;
  assign y__h46090 = { 9'd0, lv_op2_subnormal__h45687 } ;
  assign y__h46092 = { 9'd0, lv_op1_subnormal__h45686 } ;
  assign y__h46335 = _start_flags[7] & y__h46379 ;
  assign y__h46337 = ~_start_flags[5] ;
  assign y__h46379 = ~_start_flags[10] ;
  assign y_avValue_fst__h11667 =
	     _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d33 ?
	       _theResult_____1_fst__h11712 :
	       lv_product_exponent_inc_shift__h8066 ;
  assign y_avValue_fst__h44428 =
	     _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757 ?
	       resultant_exponent_sub_zerosMSB__h44184 :
	       10'd0 ;
  assign y_avValue_fst__h44442 =
	     uut_ff_stage5_fifo$D_OUT[94] ?
	       uut_ff_stage5_fifo$D_OUT[105:96] :
	       y_avValue_fst__h44428 ;
  assign y_avValue_snd_fst__h11750 =
	     _1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d33 ?
	       _theResult_____1_snd__h11713 :
	       lv_product_mantissa___1__h8112 ;
  assign y_avValue_snd_fst__h44694 =
	     uut_ff_stage5_fifo$D_OUT[94] ?
	       uut_ff_stage5_fifo$D_OUT[95:23] :
	       y_avValue_snd_fst__h44762 ;
  assign y_avValue_snd_fst__h44762 =
	     _0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757 ?
	       resultant_mantissa_norm_zerosMSB__h44183 :
	       y_avValue_snd_fst__h44769 ;
  assign y_avValue_snd_fst__h44769 =
	     uut_ff_stage5_fifo$D_OUT[95:23] <<
	     resultant_exponent_sub__h44179 ;
  always@(uut_ff_stage5_fifo$D_OUT or
	  lv_inexact__h44652 or
	  y__h44954 or
	  lv_round_up___1__h44889 or
	  lv_round_up___1__h44926 or
	  IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785)
  begin
    case (uut_ff_stage5_fifo$D_OUT[21:19])
      3'b0: _theResult_____7__h44653 = lv_round_up___1__h44889;
      3'b010: _theResult_____7__h44653 = lv_round_up___1__h44926;
      3'b100:
	  _theResult_____7__h44653 =
	      IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[47];
      default: _theResult_____7__h44653 =
		   uut_ff_stage5_fifo$D_OUT[21:19] == 3'b011 &&
		   lv_inexact__h44652 & y__h44954;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        uut_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (uut_rg_state_handler$EN)
	  uut_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      uut_rg_state_handler$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    uut_rg_state_handler = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage)
	$display("and thus the sticky bit = %b", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage)
	$display("lv_actual_product_exponent = %d",
		 $signed(uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d16));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage &&
	  (!uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 ||
	   uut_ff_input_fifo$D_OUT[107] &&
	   uut_ff_input_fifo$D_OUT[59:50] == 10'd254))
	$display("lv_product_overflow!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage &&
	  uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d18 &&
	  (!uut_ff_input_fifo$D_OUT[107] ||
	   uut_ff_input_fifo$D_OUT[59:50] != 10'd254) &&
	  uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d28)
	$display("lv_product_underflow!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage &&
	  uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d35)
	$display("possible_shift",
		 $signed(_1_MINUS_IF_uut_ff_input_fifo_first__4_BIT_107__ETC___d32));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage &&
	  uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d35)
	$display("lv_product_exponent : %d bin : %b",
		 lv_product_exponent_inc_shift__h8066,
		 lv_product_exponent_inc_shift__h8066);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage &&
	  uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d35)
	$display("lv_product_mantissa = %b lv_product_exponent : %d since exp < -126",
		 lv_product_mantissa___1__h8112,
		 lv_product_exponent_inc_shift__h8066);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage1_after_input_stage &&
	  uut_ff_input_fifo_first__4_BITS_59_TO_50_5_MIN_ETC___d35)
	$display("and thus the sticky bit = %b", lv_sticky___1__h8113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_3)
	$display("sign2 = %b exponent2 = %b mantissa2 = %b",
		 sign2__h11948,
		 lv_minuend__h11982,
		 mantissa2__h11992);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_3)
	$display("sign3 = %b exponent3 = %b mantissa3 = %b",
		 sign3__h11950,
		 lv_minuend__h11982,
		 mantissa3__h11993);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_uut_rl_stage_3) $display;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage &&
	  !uut_ff_stage5_fifo$D_OUT[95] &&
	  !uut_ff_stage5_fifo$D_OUT[94] &&
	  !_0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757)
	$display("resultant_exponent : %d", uut_ff_stage5_fifo$D_OUT[105:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage &&
	  !uut_ff_stage5_fifo$D_OUT[95] &&
	  !uut_ff_stage5_fifo$D_OUT[94] &&
	  !_0_CONCAT_uut_ff_stage5_fifo_first__47_BITS_6_T_ETC___d757)
	$display("add_sub subnormal!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("resultant_exponent : %b", resultant_exponent__h44450);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("resultant_exponent : %d res_exp_int : %d",
		 resultant_exponent__h44450,
		 $signed(IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d766));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage &&
	  IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d768 &&
	  resultant_exponent__h44450[9] &&
	  !uut_ff_stage5_fifo$D_OUT[7])
	$display("Underflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("lv_guard = %b lv_round = %b lv_sticky = %b",
		 IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[47],
		 IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[46],
		 lv_sticky__h44650);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("lv_round_up = %b", _theResult_____7__h44653);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("lv_rounded_mantissa = %b",
		 IF_uut_ff_stage5_fifo_first__47_BIT_95_48_THEN_ETC___d785[72:48]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("lv_rounded_mantissa = %b after roundup",
		 _theResult_____5__h45005);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("lv_inv : %b ex_overflow: %b lv_inexact : %b",
		 !uut_ff_stage5_fifo$D_OUT[9] &&
		 !uut_ff_stage5_fifo$D_OUT[8] &&
		 uut_ff_stage5_fifo$D_OUT[16],
		 ex_overflow__h45052,
		 lv_inexact__h45053);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uut_rl_stage_5_final_stage)
	$display("FMA: Result: %h fflags: %8h",
		 lv_final_output__h45047,
		 { 24'b0, fflags__h45054 });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	$display("lv_inv : %h lv_inf : %h lv_zero : %h",
		 x__h46308,
		 x__h46309,
		 x__h46310);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	$display("flags1 : %b flags2 : %b flags3 : %b",
		 _start_flags[14:10],
		 _start_flags[9:5],
		 _start_flags[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	$display("lv_summed_exponent = %b", lv_summed_exponent__h46053);
  end
  // synopsys translate_on
endmodule  // mkfpu_fm_add_sub32

